{"docstore/data": {"41a4db27-3aae-41a6-99f9-2f07f4400283": {"__data__": {"id_": "41a4db27-3aae-41a6-99f9-2f07f4400283", "embedding": null, "metadata": {"filename": "bridging-the-language-gap-in-programming-introducing-autotranslatedoc-ccc93fbcd3a8.md", "extension": ".md", "title": "Bridging the Language Gap in Programming: Introducing AutoTranslateDoc", "date": "Dec 8, 2023", "url": "https://www.llamaindex.ai/blog/bridging-the-language-gap-in-programming-introducing-autotranslatedoc-ccc93fbcd3a8"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "321899a1-3c48-4a8a-aa09-d43c7608a13d", "node_type": "4", "metadata": {"filename": "bridging-the-language-gap-in-programming-introducing-autotranslatedoc-ccc93fbcd3a8.md", "extension": ".md", "title": "Bridging the Language Gap in Programming: Introducing AutoTranslateDoc", "date": "Dec 8, 2023", "url": "https://www.llamaindex.ai/blog/bridging-the-language-gap-in-programming-introducing-autotranslatedoc-ccc93fbcd3a8"}, "hash": "effb51b17e4f4766f6ddfe3d17667dc98e1c4b0713b487aa20097b1c03e39cdd", "class_name": "RelatedNodeInfo"}}, "text": "Author: [ Pierre-Loic Doulcet ](https://twitter.com/hexapode)\n\nAs programmers, we often find ourselves limited by language barriers.\nDocumentation for various programming frameworks and tools is predominantly\navailable in English, and increasingly in languages like Chinese, creating\nchallenges for non-native speakers. I faced similar obstacles in my early\nprogramming days, and it was only through community efforts like [ traduc.org\n](https://traduc.org/) \u2019s translation of man pages that I could surmount them.\n\nToday, we are excited to unveil a solution to this pervasive issue: [\nAutoTranslateDoc ](https://www.npmjs.com/package/autotranslatedoc) , a\ncommand-line tool designed to democratize access to technical documentation by\nbreaking down language barriers.\n\n**How AutoTranslateDoc Works**\n\n  1. Collect the Documentation: The tool connects to GitHub, identifying and downloading .md and .mdx files from any repository. \n  2. Chunk and Prepare: The documentation is then chunked or split for translation. \n  3. Translate Efficiently: Utilizing the power of LLMs like GPT-3.5 and GPT-4, each chunk of documentation is translated accurately. \n  4. Verify and Enhance: The translation is automatically verified, with retranslation if needed, ensuring the highest quality. \n  5. Consolidate: Finally, the chunks are amalgamated back into a cohesive document. \n\nOur initial tests on translating the llamaIndexTS documentation have been\nhighly promising. You can now read our docs in over a dozen languages\nincluding [ Chinese ](https://ts.llamaindex.ai/zh-Hans/) , [ French\n](https://ts.llamaindex.ai/fr/) , and [ Spanish\n](https://ts.llamaindex.ai/es/) !\n\n**Getting Started**\n\nInstall AutoTranslateDoc easily via npm, or clone the repo ( [\nhttps://github.com/run-llama/automatic-doc-translate ](https://github.com/run-\nllama/automatic-doc-translate) ) :\n\n    \n    \n    npm install -g autotranslatedoc\n\nTry it out with run-lama/LlamaIndexTS or your favorite repo! You will need a [\nGitHub Personal Access Token\n](https://docs.github.com/en/authentication/keeping-your-account-and-data-\nsecure/managing-your-personal-access-tokens) and an [ OpenAI API Key\n](https://platform.openai.com/api-keys) (the tool will prompt you to set\nthese):\n\n    \n    \n    # Translate\n    autotranslatedoc translate run-llama LlamaIndexTS -d apps/docs -l fr\n    \n    \n    #build\n    autotranslatedoc build run-llama LlamaIndexTS -d apps/docs -l fr\n\nThis translates the directory ` apps/docs ` in the GitHub repo ` run-\nllama/LlamaIndexTS ` .\n\n**Improving Accuracy and Consistency**\n\nOur commitment to improving translation accuracy led us to innovate in both\nthe translation process and verification methods.\n\n**Strategic Document Splitting:**\n\nWe approach translation by dividing each page of the documentation into\nsections. To provide enhanced context and coherence, each section\u2019s title\nhierarchy is appended to its respective chunk during translation. This\ntechnique ensures that the translated content maintains the original structure\nand thematic relevance.\n\n**Rigorous Translation Verification:**\n\nOur verification process is designed to rigorously assess the accuracy of\ntranslations. We employ several checks on the translated documentation:\n\n  * Translation Length Check: We compare the length of the translated text with the original to ensure consistency. \n  * Title Hierarchy Analysis: We verify that no new sections are inadvertently added in the translation. \n  * Link Count Validation: The number of hyperlinks is matched against the original to ensure none are missed or added unnecessarily. \n  * Code Block Accuracy: The presence and correctness of code blocks in the translation are checked against the original document. \n\nThese checks address common issues with LLMs, such as hallucination or\nomission, and prompt retranslation when necessary. This rigorous process\nsignificantly enhances the accuracy of our translations. Moreover, we\nincorporate a unique self-critique feature, where the LLM evaluates its own\ntranslation output, further refining the quality.\n\nThis dual approach of meticulous chunking and thorough verification ensures\nthat our translations are not only accurate but also contextually relevant,\nmaintaining the integrity and utility of the original documentation.\n\n**Managing Documentation Updates: Keeping Translations Current**\n\nDocumentation, by its nature, is a dynamic entity that evolves over time.\nRecognizing this, we\u2019ve integrated a robust system into AutoDocTranslate to\nmanage documentation updates efficiently.\n\n**Historical Tracking through JSON:**\n\nWhen translating a repository using our tool, a .json file is generated,\nchronicling the history of translations. This file is crucial for tracking\nchanges and versions in the documentation. It serves as a foundation for\ndifferential translation, a process that identifies and translates only the\nnewly added or modified content. This feature can be accessed through the `\nautotranslatedoc update ` command, streamlining the maintenance of up-to-date\ntranslations.\n\n**Future Enhancements:**\n\nWe are actively working on enhancing this system with the following features:\n\n**Manual Change Integration:** Recognizing that translations might undergo\nmanual edits post-generation, we are developing functionality to account for\nthese manual changes during updates. This will ensure that any human revisions\nare retained and only new or altered sections from the source documentation\nare translated in subsequent updates.\n\n**GUI for Translation Management:** To further simplify the process of\ntranslation editing, tracking, and verification, we\u2019re in the early stages of\ndeveloping a graphical user interface (GUI). This interface will allow users\nto interact more intuitively with the translations. An experimental version of\nthis feature can be accessed through the ` autotranslatedoc serve ` command.\nThis GUI will enable users to visually navigate through the translations, make\nedits, and verify the accuracy of the content more efficiently.\n\nBy continually updating and refining these features, AutoDocTranslate aims to\nstay at the forefront of making technical documentation universally accessible\nand easy to maintain in multiple languages.\n\n**The Future of Technical Documentation**\n\nAutoDocTranslate is more than a tool; it\u2019s a step towards an inclusive,\nbarrier-free tech world where language is no longer an impediment to learning\nand growth. We\u2019re excited to see how it empowers programmers across the globe.\n\nJoin us in this journey and contribute to a more accessible programming\ncommunity!", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 6589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"41a4db27-3aae-41a6-99f9-2f07f4400283": {"doc_hash": "96ec1d7ee8efb59864fea5c56fbfac8d207722f54dcaa820d7f5925765529772", "ref_doc_id": "321899a1-3c48-4a8a-aa09-d43c7608a13d"}}, "docstore/ref_doc_info": {"321899a1-3c48-4a8a-aa09-d43c7608a13d": {"node_ids": ["41a4db27-3aae-41a6-99f9-2f07f4400283"], "metadata": {"filename": "bridging-the-language-gap-in-programming-introducing-autotranslatedoc-ccc93fbcd3a8.md", "extension": ".md", "title": "Bridging the Language Gap in Programming: Introducing AutoTranslateDoc", "date": "Dec 8, 2023", "url": "https://www.llamaindex.ai/blog/bridging-the-language-gap-in-programming-introducing-autotranslatedoc-ccc93fbcd3a8"}}}}