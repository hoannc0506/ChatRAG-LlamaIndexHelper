{"docstore/data": {"7f310c86-c58d-402f-abdc-a9638ea741b3": {"__data__": {"id_": "7f310c86-c58d-402f-abdc-a9638ea741b3", "embedding": null, "metadata": {"Header_1": " Summary", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc27914c-363e-41cf-8f3b-7c67d5af6869", "node_type": "1", "metadata": {"Header_1": " Context"}, "hash": "229d13ab731ca8a7713ffb9fa70dd09b2709af91fd3253aaa1a1a632bd73a0cb", "class_name": "RelatedNodeInfo"}}, "text": "Summary\n\nIn this article, we showcase a powerful new query engine ( `\nSQLAutoVectorQueryEngine ` ) in LlamaIndex that can leverage both a SQL\ndatabase as well as a vector store to fulfill complex natural language queries\nover a combination of structured and unstructured data. This query engine can\nleverage the expressivity of SQL over structured data, and join it with\nunstructured context from a vector database. We showcase this query engine on\na few examples and show that it can handle queries that make use of both\nstructured/unstructured data, or either.\n\nCheck out the full guide here: [ https://gpt-\nindex.readthedocs.io/en/latest/examples/query_engine/SQLAutoVectorQueryEngine.html\n](https://gpt-\nindex.readthedocs.io/en/latest/examples/query_engine/SQLAutoVectorQueryEngine.html)\n.", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc27914c-363e-41cf-8f3b-7c67d5af6869": {"__data__": {"id_": "dc27914c-363e-41cf-8f3b-7c67d5af6869", "embedding": null, "metadata": {"Header_1": " Context", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f310c86-c58d-402f-abdc-a9638ea741b3", "node_type": "1", "metadata": {"Header_1": " Summary", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "98ffe77026617d74d2205ef876aa92459bbe6c02074d55ae59f24af7b86a1039", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e4ea7e80-3b81-49c7-b0ef-410b5cbd81a7", "node_type": "1", "metadata": {"Header_1": " Context", "Header_2": " Text-to-SQL Over Structured Data"}, "hash": "c260c46fd15b9d904387fef9b5a5d67bd18801a231929f1f242b6fec6b92b9d4", "class_name": "RelatedNodeInfo"}}, "text": "Context\n\nData lakes in enterprises typically encompass both **structured** and\n**unstructured** data. Structured data is typically stored in a tabular format\nin SQL databases, organized into tables with predefined schemas and\nrelationships between entities. On the other hand, unstructured data found in\ndata lakes lacks a predefined structure and does not fit neatly into\ntraditional databases. This type of data includes text documents, but also\nother multimodal formats such as audio recordings, videos, and more.\n\nLarge Language Models (LLMs) have the ability to extract insights from both\nstructured and unstructured data. There have been some initial tooling and\nstacks that have emerged for tackling both types of data:\n\n  * **Text-to-SQL (Structured data):** Given a collection of tabular schemas, we convert natural language into a SQL statement which can then be executed against the database. \n  * **Semantic Search with a Vector Database (Unstructured Data):** Store unstructured documents along with their embeddings in a vector database (e.g. Pinecone, Chroma, Milvus, Weaviate, etc.). During query-time, fetch the relevant documents by embedding similarity, and then put into the LLM input prompt to synthesize a response. \n\nEach of these stacks solves particular use cases.", "mimetype": "text/plain", "start_char_idx": 801, "end_char_idx": 2090, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4ea7e80-3b81-49c7-b0ef-410b5cbd81a7": {"__data__": {"id_": "e4ea7e80-3b81-49c7-b0ef-410b5cbd81a7", "embedding": null, "metadata": {"Header_1": " Context", "Header_2": " Text-to-SQL Over Structured Data", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc27914c-363e-41cf-8f3b-7c67d5af6869", "node_type": "1", "metadata": {"Header_1": " Context", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "01a8d0943de2a2d677c12aa664494602d708fab70dd0ce3e6fdfca457a421d1f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b397dbf-feaf-452d-b200-c1b873a37e02", "node_type": "1", "metadata": {"Header_1": " Context", "Header_2": " Semantic Search over Unstructured Data"}, "hash": "40f5ceedb22b45a0961403c92e89780a6c2ef6191edddee754ee7db8fb8995f2", "class_name": "RelatedNodeInfo"}}, "text": "Text-to-SQL Over Structured Data\n\nIn the structured setting, SQL is an extremely expressive language for\noperating over tabular data \u2014 in the case of analytics, you can get\naggregations, join information across multiple tables, sort by timestamp, and\nmuch more. Using the LLM to convert natural language to SQL can be thought as\na program synthesis \u201ccheat code\u201d \u2014 just let the LLM compile to the right SQL\nquery, and let the SQL engine on the database handle the rest!\n\n**Use Case:** Text-to-SQL queries are well-suited for analytics use cases\nwhere the answer can be found by executing a SQL statement. They are not\nsuited for cases where you\u2019d need more detail than what is found in a\nstructured table, or if you\u2019d need more sophisticated ways of determining\nrelevance to the query beyond simple constructs like ` WHERE ` conditions.\n\n**Example queries suited for Text-to-SQL:**\n\n  * \u201cWhat is the average population of cities in North America\u201d? \n  * \u201cWhat are the largest cities and populations in each respective continent?\u201d", "mimetype": "text/plain", "start_char_idx": 2096, "end_char_idx": 3123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b397dbf-feaf-452d-b200-c1b873a37e02": {"__data__": {"id_": "1b397dbf-feaf-452d-b200-c1b873a37e02", "embedding": null, "metadata": {"Header_1": " Context", "Header_2": " Semantic Search over Unstructured Data", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4ea7e80-3b81-49c7-b0ef-410b5cbd81a7", "node_type": "1", "metadata": {"Header_1": " Context", "Header_2": " Text-to-SQL Over Structured Data", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "b39a5ef6af1ce7119b3fd0a524ecd56280de93d31e54a6fc6f60bcf51cdd7636", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "685897f2-8530-4dcd-a00a-0be2558b3eb9", "node_type": "1", "metadata": {"Header_1": " Context", "Header_2": " Combining These Two Systems"}, "hash": "52b0c67ebe833be525af34d29839cff6c48e0d9e343c7da08ba657eda41b719e", "class_name": "RelatedNodeInfo"}}, "text": "Semantic Search over Unstructured Data\n\nIn the unstructured setting, the behavior for retrieval-augmented generation\nsystems is to first perform retrieval and then synthesis. During retrieval, we\nfirst look up the most relevant documents to the query by embedding\nsimilarity. Some vector stores support being able to handle additional\nmetadata filters for retrieval. We can choose to manually specify the set of\nrequired filters, or have the LLM \u201cinfer\u201d what the query string and metadata\nfilters should be (see our [ auto-retrieval modules\n](https://github.com/jerryjliu/llama_index/blob/main/docs/examples/vector_stores/pinecone_auto_retriever.ipynb)\nin LlamaIndex or LangChain\u2019s [ self-query module\n](https://python.langchain.com/en/latest/modules/indexes/retrievers/examples/self_query.html)\n).\n\n**Use Case:** Retrieval Augmented Generation is well suited for queries where\nthe answer can be obtained within some sections of unstructured text data.\nMost existing vector stores (e.g. Pinecone, Chroma) do not offer a SQL-like\ninterface; hence they are less suited for queries that involve aggregations,\njoins, sums, etc.\n\n**Example queries suited for Retrieval Augmented Generation**\n\n  * \u201cTell me about the historical museums in Berlin\u201d \n  * \u201cWhat does Jordan ask from Nick on behalf of Gatsby?\u201d", "mimetype": "text/plain", "start_char_idx": 3130, "end_char_idx": 4429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "685897f2-8530-4dcd-a00a-0be2558b3eb9": {"__data__": {"id_": "685897f2-8530-4dcd-a00a-0be2558b3eb9", "embedding": null, "metadata": {"Header_1": " Context", "Header_2": " Combining These Two Systems", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1b397dbf-feaf-452d-b200-c1b873a37e02", "node_type": "1", "metadata": {"Header_1": " Context", "Header_2": " Semantic Search over Unstructured Data", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "1b88d312869627635e91b92328d7dfe88d53fd0e269a8080e9dfd8b4cdc03004", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "573405bd-c04e-4019-a03d-330349adb7e6", "node_type": "1", "metadata": {"Header_1": " A Query Engine to Combine Structured Analytics and Semantic Search"}, "hash": "af208e8b21a4bc8b19034536f7f782eeac0f5838c2e8ef90fb6af27a9e72cc4e", "class_name": "RelatedNodeInfo"}}, "text": "Combining These Two Systems\n\nFor some queries, we may want to make use of knowledge in **both structured\ntables as well as vector databases/document stores** in order to give the best\nanswer to the query. Ideally this can give us the best of both worlds: the\nanalytics capabilities over structured data, and semantic understanding over\nunstructured data.\n\nHere\u2019s an example use case:\n\n  * You have access to a collection of articles about different cities, stored in a vector database \n  * You also have access to a structured table containing statistics for each city. \n\nGiven this data collection, let\u2019s take an example query: \u201cTell me about the\narts and culture of the city with the highest population.\u201d\n\nThe \u201cproper\u201d way to answer this question is roughly as follows:\n\n  * Query the structured table for the city with the highest population. \n\n    \n    \n    SELECT city, population FROM city_stats ORDER BY population DESC LIMIT 1\n\n  * Convert the original question into a more detailed question: \u201cTell me about the arts and culture of Tokyo.\u201d \n  * Ask the new question over your vector database. \n  * Use the original question + intermediate queries/responses to SQL db and vector db to synthesize the answer. \n\nLet\u2019s think about some of the high-level implications of such a sequence:\n\n  * Instead of doing embedding search (and optionally metadata filters) to retrieve relevant context, we want to somehow have a SQL query as a first \u201cretrieval\u201d step. \n  * We want to make sure that we can somehow \u201cjoin\u201d the results from the SQL query with the context stored in the vector database. There is no existing language to \u201cjoin\u201d information between a SQL and vector database. We will have to implement this behavior ourselves. \n  * Neither data source can answer this question on its own. The structured table only contains population information. The vector database contains city information but no easy way to query for the city with the maximum population.", "mimetype": "text/plain", "start_char_idx": 4436, "end_char_idx": 6398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "573405bd-c04e-4019-a03d-330349adb7e6": {"__data__": {"id_": "573405bd-c04e-4019-a03d-330349adb7e6", "embedding": null, "metadata": {"Header_1": " A Query Engine to Combine Structured Analytics and Semantic Search", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "685897f2-8530-4dcd-a00a-0be2558b3eb9", "node_type": "1", "metadata": {"Header_1": " Context", "Header_2": " Combining These Two Systems", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "58daca045ece87ce5474b4c3883b35af79c55656a6c1d30a551bd74cfce66c7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bab8a43d-2b0f-44b5-b5ed-7bc8f75f98f4", "node_type": "1", "metadata": {"Header_1": " Experiments"}, "hash": "dc475a781dcb80f8135b0beb4b573edb96d4fbb6f550419fccf048a25256c887", "class_name": "RelatedNodeInfo"}}, "text": "A Query Engine to Combine Structured Analytics and Semantic Search\n\nWe have created a brand-new query engine ( ` SQLAutoVectorQueryEngine ` ) that\ncan query, join, sequence, and combine both structured data from both your SQL\ndatabase and unstructured data from your vector database in order to\nsynthesize the final answer.\n\nThe ` SQLAutoVectorQueryEngine ` is initialized through passing in a SQL query\nengine ( ` GPTNLStructStoreQueryEngine ` ) as well as a query engine that uses\nour vector store [ auto-retriever module\n](https://github.com/jerryjliu/llama_index/blob/main/docs/examples/vector_stores/pinecone_auto_retriever.ipynb)\n( ` VectorIndexAutoRetriever ` ). Both the SQL query engine and vector query\nengines are wrapped as \u201cTool\u201d objects containing a ` name ` and ` description\n` field.\n\n> _Reminder: the_ ` _VectorIndexAutoRetriever_ ` _takes in a natural language\n> query as input. Given some knowledge of the metadata schema of the vector\n> database, the auto retriever first_ infers _the other necessary query\n> parameters to pass in (e.g. top-k value, and metadata filters), and executes\n> a query against the vector database with all the query parameters._\n\nDiagram of the flow for SQLAutoVectorQueryEngine\n\nDuring query-time, we run the following steps:\n\n  1. A selector prompt (similarly used in our ` [ RouterQueryEngine ](https://gpt-index.readthedocs.io/en/latest/reference/query/query_engines/router_query_engine.html) ` , see [ guide ](https://gpt-index.readthedocs.io/en/latest/examples/query_engine/RouterQueryEngine.html) ) first chooses whether we should query the SQL database or the vector database. If it chooses to use the vector query engine, then the rest of the function execution is the same as querying the ` RetrieverQueryEngine ` with ` VectorIndexAutoRetriever ` . \n  2. If it chooses to query the SQL database, it will execute a text-to-SQL query operation against the database, and (optionally) synthesize a natural language output. \n  3. A **query transformation** is run, to convert the original question into a more detailed question given the results from the SQL query. For instance if the original question is \u201cTell me about the arts and culture of the city with the highest population.\u201d, and the SQL query returns Tokyo as the city with the highest population, then the new query is \u201cTell me about the arts and culture of Tokyo.\u201d The one exception is if the SQL query itself is enough to answer the original question; if it is, then function execution returns with the SQL query as the response. \n  4. The new query is then run through through the vector store query engine, which performs retrieval from the vector store and then LLM response synthesis. We enforce using a ` VectorIndexAutoRetriever ` module. This allows us to automatically infer the right query parameters (query string, top k, metadata filters), given the result of the SQL query. For instance, with the example above, we may infer the query to be something like ` query_str=\"arts and culture\" ` and ` filters={\"title\": \"Tokyo\"} ` . \n  5. The original question, SQL query, SQL response, vector store query, and vector store response are combined into a prompt to synthesize the final answer. \n\nTaking a step back, here are some general comments about this approach:\n\n  * Using our auto-retrieval module is our way of _simulating_ a join between the SQL database and vector database. We effectively use the results from our SQL query to determine the parameters to query the vector database with. \n  * This also implies that there doesn\u2019t need to be an explicit mapping between the items in the SQL database and the metadata in the vector database, since we can rely on the LLM being able come up with the right query for different items. It would be interesting to model explicit relationships between structured tables and document store metadata though; that way we don\u2019t need to spend an extra LLM call in the auto-retrieval step inferring the right metadata filters.", "mimetype": "text/plain", "start_char_idx": 6404, "end_char_idx": 10396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bab8a43d-2b0f-44b5-b5ed-7bc8f75f98f4": {"__data__": {"id_": "bab8a43d-2b0f-44b5-b5ed-7bc8f75f98f4", "embedding": null, "metadata": {"Header_1": " Experiments", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "573405bd-c04e-4019-a03d-330349adb7e6", "node_type": "1", "metadata": {"Header_1": " A Query Engine to Combine Structured Analytics and Semantic Search", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "2d37c8bb68096efa5dfb030a940d970d574a3cb64076bb93bacbd360987db6a7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b3ae609-f6aa-4e78-9b7a-c96bb5967129", "node_type": "1", "metadata": {"Header_1": " Experiments", "Header_2": " Setup"}, "hash": "f6e9c204883e81b94574b232607b565ea083bafde21a5ea7f41bc0adc5d79402", "class_name": "RelatedNodeInfo"}}, "text": "Experiments\n\nSo how well does this work? It works surprisingly well across a broad range of\nqueries, from queries that can leverage both structured data and unstructured\ndata to queries that are specific to a structured data collection or\nunstructured data collection.", "mimetype": "text/plain", "start_char_idx": 10402, "end_char_idx": 10670, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b3ae609-f6aa-4e78-9b7a-c96bb5967129": {"__data__": {"id_": "9b3ae609-f6aa-4e78-9b7a-c96bb5967129", "embedding": null, "metadata": {"Header_1": " Experiments", "Header_2": " Setup", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bab8a43d-2b0f-44b5-b5ed-7bc8f75f98f4", "node_type": "1", "metadata": {"Header_1": " Experiments", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "2029dce8c1dfc44a9a76683422f714f967964296970c56d5c140387f81577879", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "79afa9ab-d8ae-4ff3-80a6-d3b2a633eb1a", "node_type": "1", "metadata": {"Header_1": " Experiments", "Header_2": " Results"}, "hash": "b8cddca5752b0411b5c782d80a2167bc1eceef0ec01e0f4ec0a1b941cd223a71", "class_name": "RelatedNodeInfo"}}, "text": "Setup\n\nOur experiment setup is very simple. We have a SQL table called ` city_stats `\nwhich contains the city, population, and country of three different cities:\nToronto, Tokyo, and Berlin.\n\nWe also use a Pinecone index to store Wikipedia articles corresponding to the\nthree cities. Each article is chunked up and stored as a separate \u201cNode\u201d\nobject; each chunk also contains a ` title ` metadata attribute containing the\ncity name.\n\nWe then derive the ` VectorIndexAutoRetriever ` and ` RetrieverQueryEngine `\nfrom the Pinecone vector index.\n\n    \n    \n    from llama_index.indices.vector_store.retrievers import VectorIndexAutoRetriever\n    from llama_index.vector_stores.types import MetadataInfo, VectorStoreInfo\n    from llama_index.query_engine.retriever_query_engine import RetrieverQueryEngine\n    \n    \n    vector_store_info = VectorStoreInfo(\n        content_info='articles about different cities',\n        metadata_info=[\n            MetadataInfo(\n                name='city', \n                type='str', \n                description='The name of the city'),\n        ]\n    )\n    vector_auto_retriever = VectorIndexAutoRetriever(vector_index, vector_store_info=vector_store_info)\n    \n    retriever_query_engine = RetrieverQueryEngine.from_args(\n        vector_auto_retriever, service_context=service_context\n    )\n\nYou can also get the SQL query engine as follows\n\n    \n    \n    sql_query_engine = sql_index.as_query_engine()\n\nBoth the SQL query engine and vector query engine can be wrapped as `\nQueryEngineTool ` objects.\n\n    \n    \n    sql_tool = QueryEngineTool.from_defaults(\n        query_engine=sql_query_engine,\n        description=(\n            'Useful for translating a natural language query into a SQL query over a table containing: '\n            'city_stats, containing the population/country of each city'\n        )\n    )\n    vector_tool = QueryEngineTool.from_defaults(\n        query_engine=query_engine,\n        description=f'Useful for answering semantic questions about different cities',\n    )\n\nFinally, we can define our ` SQLAutoVectorQueryEngine `\n\n    \n    \n    query_engine = SQLAutoVectorQueryEngine(\n        sql_tool,\n        vector_tool,\n        service_context=service_context\n    )", "mimetype": "text/plain", "start_char_idx": 10676, "end_char_idx": 12897, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79afa9ab-d8ae-4ff3-80a6-d3b2a633eb1a": {"__data__": {"id_": "79afa9ab-d8ae-4ff3-80a6-d3b2a633eb1a", "embedding": null, "metadata": {"Header_1": " Experiments", "Header_2": " Results", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b3ae609-f6aa-4e78-9b7a-c96bb5967129", "node_type": "1", "metadata": {"Header_1": " Experiments", "Header_2": " Setup", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "29dd0fa7633a4ab2f61753263316782e7616808920fb867f177df74d0dc29d3a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a54a1727-dfbb-4673-b6a0-7f5b961d1d95", "node_type": "1", "metadata": {"Header_1": " Conclusion"}, "hash": "0e6bb519962d4bfed4217db8360733f21d5129d6a83a1b94c848db1f28a98225", "class_name": "RelatedNodeInfo"}}, "text": "Results\n\nWe run some example queries.\n\n**Query 1**\n\n    \n    \n    query_engine.query(\n      'Tell me about the arts and culture of the city with the highest population'\n    )\n\nIntermediate steps:\n\nFinal Response:\n\n    \n    \n    Tokyo is the city with the highest population, with 13.96 million people. It is a vibrant city with a rich culture and a wide variety of art forms. From traditional Japanese art such as calligraphy and woodblock prints to modern art galleries and museums, Tokyo has something for everyone. There are also many festivals and events throughout the year that celebrate the city's culture and art. Some popular festivals and events in Tokyo include the Sann\u014d Festival at Hie Shrine, the Sanja Festival at Asakusa Shrine, and the biennial Kanda Festivals. These events often feature parades with elaborately decorated floats and thousands of people. Additionally, an enormous fireworks display over the Sumida River takes place annually on the last Saturday of July, attracting over a million viewers. During spring, when cherry blossoms bloom, many residents gather in Ueno Park, Inokashira Park, and the Shinjuku Gyoen National Garden for picnics under the blossoms.\n\nThis query runs through the full flow of the ` SQLAutoVectorQueryEngine ` . It\nfirst queries the SQL database for the city with the highest population\n(\u201cTokyo\u201d), and then queries the vector database with the new query. The\nresults are combined into a final response.\n\n**Query 2**\n\n    \n    \n    query_engine.query(\"Tell me about the history of Berlin\")\n\nIntermediate Steps:\n\nFinal Response:\n\n    \n    \n    Berlin's history dates back to the early 13th century when it was founded as a small settlement. In 1618, the Margraviate of Brandenburg entered into a personal union with the Duchy of Prussia, and in 1701, they formed the Kingdom of Prussia with Berlin as its capital. The city grew and merged with neighboring cities, becoming a center of the Enlightenment under the rule of Frederick the Great in the 18th century.\n    \n    The Industrial Revolution in the 19th century transformed Berlin, expanding its economy, population, and infrastructure. In 1871, it became the capital of the newly founded German Empire. The early 20th century saw Berlin as a hub for the German Expressionist movement and a major world capital known for its contributions to science, technology, arts, and other fields.\n    \n    In 1933, Adolf Hitler and the Nazi Party came to power, leading to a decline in Berlin's Jewish community and the city's involvement in World War II. After the war, Berlin was divided into East and West Berlin, with the former under Soviet control and the latter under the control of the United States, United Kingdom, and France. The Berlin Wall was built in 1961, physically and ideologically dividing the city until its fall in 1989. Following the reunification of Germany in 1990, Berlin once again became the capital of a unified Germany and has since continued to grow and develop as a major global city.\n\nThis query only requires the vector database and not the SQL database. The\ninitial selector correctly identifies that we should just query the vector\ndatabase and return the result.\n\n**Query 3**\n\n    \n    \n    query_engine.query('Can you give me the country corresponding to each city?')\n\nIntermediate Steps\n\nFinal Response\n\n    \n    \n     Toronto is in Canada, Tokyo is in Japan, and Berlin is in Germany.\n\nThis query can be answered by just querying the SQL database, it does not need\nadditional information from the vector database. The query transform step\ncorrectly identifies \u201cNone\u201d as the followup question, indicating that the\noriginal question has been answered.", "mimetype": "text/plain", "start_char_idx": 12903, "end_char_idx": 16592, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a54a1727-dfbb-4673-b6a0-7f5b961d1d95": {"__data__": {"id_": "a54a1727-dfbb-4673-b6a0-7f5b961d1d95", "embedding": null, "metadata": {"Header_1": " Conclusion", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a9175608-7fec-4306-a083-b318b67bbd5f", "node_type": "4", "metadata": {"filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "a1f1d867138ca99619507287e6a79335ca026926fb30d4b5af6bb906fbf70133", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "79afa9ab-d8ae-4ff3-80a6-d3b2a633eb1a", "node_type": "1", "metadata": {"Header_1": " Experiments", "Header_2": " Results", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}, "hash": "5cc9d2c4b3387ac96aba6418a708fe43271d3fbcd3b10f8630c60a5bc743a195", "class_name": "RelatedNodeInfo"}}, "text": "Conclusion\n\nSo far, the stacks around LLMs + unstructured data and LLMs + structured data\nhave largely been separate. We\u2019re excited about how combining LLMs on top of\nboth structured and unstructured data can unlock new retrieval/query\ncapabilities in novel and interesting ways!\n\nWe\u2019d love for you to try out the ` SQLAutoVectorQueryEngine ` and let us know\nwhat you think.\n\nThe full notebook walkthrough can be found [ in this guide ](https://gpt-\nindex.readthedocs.io/en/latest/examples/query_engine/SQLAutoVectorQueryEngine.html)\n( [ associated notebook\n](https://github.com/jerryjliu/llama_index/blob/main/docs/examples/query_engine/SQLAutoVectorQueryEngine.ipynb)\n).", "mimetype": "text/plain", "start_char_idx": 16597, "end_char_idx": 17269, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"7f310c86-c58d-402f-abdc-a9638ea741b3": {"doc_hash": "98ffe77026617d74d2205ef876aa92459bbe6c02074d55ae59f24af7b86a1039", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "dc27914c-363e-41cf-8f3b-7c67d5af6869": {"doc_hash": "01a8d0943de2a2d677c12aa664494602d708fab70dd0ce3e6fdfca457a421d1f", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "e4ea7e80-3b81-49c7-b0ef-410b5cbd81a7": {"doc_hash": "b39a5ef6af1ce7119b3fd0a524ecd56280de93d31e54a6fc6f60bcf51cdd7636", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "1b397dbf-feaf-452d-b200-c1b873a37e02": {"doc_hash": "1b88d312869627635e91b92328d7dfe88d53fd0e269a8080e9dfd8b4cdc03004", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "685897f2-8530-4dcd-a00a-0be2558b3eb9": {"doc_hash": "58daca045ece87ce5474b4c3883b35af79c55656a6c1d30a551bd74cfce66c7d", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "573405bd-c04e-4019-a03d-330349adb7e6": {"doc_hash": "2d37c8bb68096efa5dfb030a940d970d574a3cb64076bb93bacbd360987db6a7", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "bab8a43d-2b0f-44b5-b5ed-7bc8f75f98f4": {"doc_hash": "2029dce8c1dfc44a9a76683422f714f967964296970c56d5c140387f81577879", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "9b3ae609-f6aa-4e78-9b7a-c96bb5967129": {"doc_hash": "29dd0fa7633a4ab2f61753263316782e7616808920fb867f177df74d0dc29d3a", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "79afa9ab-d8ae-4ff3-80a6-d3b2a633eb1a": {"doc_hash": "5cc9d2c4b3387ac96aba6418a708fe43271d3fbcd3b10f8630c60a5bc743a195", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}, "a54a1727-dfbb-4673-b6a0-7f5b961d1d95": {"doc_hash": "275b5b171c7456e2a93133d00281c8418b0a7d7ce5c52407da8ef8a75444bdca", "ref_doc_id": "a9175608-7fec-4306-a083-b318b67bbd5f"}}, "docstore/ref_doc_info": {"a9175608-7fec-4306-a083-b318b67bbd5f": {"node_ids": ["7f310c86-c58d-402f-abdc-a9638ea741b3", "dc27914c-363e-41cf-8f3b-7c67d5af6869", "e4ea7e80-3b81-49c7-b0ef-410b5cbd81a7", "1b397dbf-feaf-452d-b200-c1b873a37e02", "685897f2-8530-4dcd-a00a-0be2558b3eb9", "573405bd-c04e-4019-a03d-330349adb7e6", "bab8a43d-2b0f-44b5-b5ed-7bc8f75f98f4", "9b3ae609-f6aa-4e78-9b7a-c96bb5967129", "79afa9ab-d8ae-4ff3-80a6-d3b2a633eb1a", "a54a1727-dfbb-4673-b6a0-7f5b961d1d95"], "metadata": {"Header_1": " Summary", "filename": "combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b.md", "extension": ".md", "title": "Combining Text-to-SQL with Semantic Search for Retrieval Augmented Generation", "date": "May 28, 2023", "url": "https://www.llamaindex.ai/blog/combining-text-to-sql-with-semantic-search-for-retrieval-augmented-generation-c60af30ec3b"}}}}