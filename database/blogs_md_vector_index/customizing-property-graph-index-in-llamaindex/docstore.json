{"docstore/data": {"614b01e4-7e76-4ec3-8df8-fbc7ac71f116": {"__data__": {"id_": "614b01e4-7e76-4ec3-8df8-fbc7ac71f116", "embedding": null, "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03", "node_type": "4", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "acbe25d05327de8abfc6b12c09823aefbbf915a3e52ab410ca503b0b60695b5d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8cd82d02-330f-4d19-b363-31435029f495", "node_type": "1", "metadata": {"Header_2": " Environment setup"}, "hash": "75369a2ebb8fd87afcb09e59fcdbe2f41fc2302e392f0446e049defe94d80c57", "class_name": "RelatedNodeInfo"}}, "text": "Learn how to implement entity deduplication and custom retrieval methods to\nincrease GraphRAG accuracy\n\n_This is a guest post by Neo4J_\n\nThe [ property graph index ](https://www.llamaindex.ai/blog/introducing-the-\nproperty-graph-index-a-powerful-new-way-to-build-knowledge-graphs-with-llms)\nis an excellent addition to LlamaIndex and an upgrade from the previous\nknowledge graph integration. First, the data representation is slightly\ndifferent. In the previous integration, the graph was represented with\ntriples, but now we have a proper property graph integration where nodes have\nlabels and optionally node properties.\n\nExample of a property graph model.\n\nEach node is assigned a label indicating its type, such as Person,\nOrganization, Project, or Department. Nodes and relationships may also store\nnode properties for other relevant details, such as the date of birth or\nproject start and end date, as shown in this example.\n\nSecond, the property graph index is designed to be modular, so you can use one\nor multiple (custom) knowledge graph constructors as well as retrievers,\nmaking it an incredible tool to build your first knowledge graph or customize\nthe implementation for your specific needs.\n\nProperty graph workflow\n\nThe image illustrates the property graph integration within the LlamaIndex ,\nbeginning with documents being passed to graph constructors. These\nconstructors are modular components responsible for extracting structured\ninformation, which is then stored in a knowledge graph. The graph can be built\nusing various or custom modules, highlighting the system\u2019s flexibility to\nadapt to different data sources or extraction needs.\n\nGraph retrievers then access the knowledge graph to retrieve data. This stage\nis also modular, allowing for the use of multiple retrievers or custom\nsolutions designed to query specific types of data or relationships within the\ngraph. Finally, the retrieved data is used by a LLM to generate an answer,\nrepresenting the output or the insight derived from the process. This flow\nemphasizes a highly adaptable and scalable system where each component can be\nindependently modified or replaced to enhance the overall functionality or to\ntailor it to specific requirements.\n\nIn this blog post you will learn how to:\n\n  1. Construct a knowledge graph using a schema-guided extraction \n  2. Perform entity deduplication using a combination of text embedding and word similarity techniques \n  3. Design a custom graph retriever \n  4. Finally, you will implement a question answering flow using the custom retriever \n\nThe code is available on [ GitHub\n](https://github.com/tomasonjo/blogs/blob/master/llm/llama_index_neo4j_custom_retriever.ipynb)\n.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2697, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8cd82d02-330f-4d19-b363-31435029f495": {"__data__": {"id_": "8cd82d02-330f-4d19-b363-31435029f495", "embedding": null, "metadata": {"Header_2": " Environment setup", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03", "node_type": "4", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "acbe25d05327de8abfc6b12c09823aefbbf915a3e52ab410ca503b0b60695b5d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "614b01e4-7e76-4ec3-8df8-fbc7ac71f116", "node_type": "1", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "36c379ed3ee9fb6df34dd3fec3666328173291a76eb448e918df3356ffcb7fc7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bce8d8b2-1007-472a-a601-6cf5dfc104c7", "node_type": "1", "metadata": {"Header_2": " Dataset"}, "hash": "22db14c1937c54fbbc36cfbfd1d0d859900c18413ac974e121753b1780627f38", "class_name": "RelatedNodeInfo"}}, "text": "Environment setup\n\nIn this blog post, we will use Neo4j as the underlying graph store. The\neasiest way is to get started is to a free instance on [ Neo4j Aura\n](https://neo4j.com/cloud/platform/aura-graph-database/) , which offers cloud\ninstances of the Neo4j database. Alternatively, you can also set up a local\ninstance of the Neo4j database by downloading the [ Neo4j Desktop\n](https://neo4j.com/download/) application and creating a local database\ninstance.\n\n    \n    \n    from llama_index.graph_stores.neo4j import Neo4jPGStore\n    \n    username=\"neo4j\"\n    password=\"stump-inlet-student\"\n    url=\"bolt://52.201.215.224:7687\"\n    \n    graph_store = Neo4jPGStore(\n        username=username,\n        password=password,\n        url=url,\n    )\n\nAdditionally, you will require a working OpenAI API key.\n\n    \n    \n    import os\n    \n    os.environ[\"OPENAI_API_KEY\"] = \"sk-\"", "mimetype": "text/plain", "start_char_idx": 2703, "end_char_idx": 3576, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bce8d8b2-1007-472a-a601-6cf5dfc104c7": {"__data__": {"id_": "bce8d8b2-1007-472a-a601-6cf5dfc104c7", "embedding": null, "metadata": {"Header_2": " Dataset", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03", "node_type": "4", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "acbe25d05327de8abfc6b12c09823aefbbf915a3e52ab410ca503b0b60695b5d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8cd82d02-330f-4d19-b363-31435029f495", "node_type": "1", "metadata": {"Header_2": " Environment setup", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "0b17b0b90219744dc8f650ceb1d2032c8411c78f1a4b6d22bbccb09719c79e45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b603fcb-9ca2-4f06-a459-99a32e782c94", "node_type": "1", "metadata": {"Header_2": " Graph construction"}, "hash": "e8f89e6e103d90af13be2c4777edc832d10190b15fc60d474a0df5080fa260b8", "class_name": "RelatedNodeInfo"}}, "text": "Dataset\n\nIn this blog post, we will use a [ sample news article dataset fetched from\nDiffbot ](https://www.diffbot.com/solutions/news-monitoring/) , which I\u2019ve\nmade available on [ GitHub for easier access\n](https://github.com/tomasonjo/blog-datasets/blob/main/news_articles.csv) .\n\nSample records from the dataset.\n\nSince the property graph index operates with documents, we have to wrap the\ntext from the news as LlamaIndex documents.\n\n    \n    \n    import pandas as pd\n    from llama_index.core import Document\n    \n    news = pd.read_csv(\n      \"https://raw.githubusercontent.com/tomasonjo/blog-datasets/main/news_articles.csv\")\n    documents = [Document(text=f\"{row['title']}: {row['text']}\") for i, row in news.iterrows()]", "mimetype": "text/plain", "start_char_idx": 3582, "end_char_idx": 4309, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b603fcb-9ca2-4f06-a459-99a32e782c94": {"__data__": {"id_": "9b603fcb-9ca2-4f06-a459-99a32e782c94", "embedding": null, "metadata": {"Header_2": " Graph construction", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03", "node_type": "4", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "acbe25d05327de8abfc6b12c09823aefbbf915a3e52ab410ca503b0b60695b5d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bce8d8b2-1007-472a-a601-6cf5dfc104c7", "node_type": "1", "metadata": {"Header_2": " Dataset", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "f9868c27277428564f0bc989c933bb120810016805bf40e46c581c827e6841fb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b6490f7c-7d73-48c8-8a4a-9ff7c0690f41", "node_type": "1", "metadata": {"Header_2": " Entity deduplication"}, "hash": "46888194c7289182fe57459b030023a28b32ec4c9a88c6baba566de9f070bddf", "class_name": "RelatedNodeInfo"}}, "text": "Graph construction\n\nAs mentioned, LlamaIndex provides multiple [ out-of-the-box graph constructors\n](https://docs.llamaindex.ai/en/latest/module_guides/indexing/lpg_index_guide/#construction)\n. In this example, we will use the [ SchemaLLMPathExtractor\n](https://docs.llamaindex.ai/en/latest/module_guides/indexing/lpg_index_guide/#schemallmpathextractor)\n, which allows us to define the schema of the graph structure we want to\nextract from documents.\n\nSchema-guided graph structure extraction.\n\nWe begin by defining the types of nodes and relationships we want the LLM to\nextract.\n\n    \n    \n    entities = Literal[\"PERSON\", \"LOCATION\", \"ORGANIZATION\", \"PRODUCT\", \"EVENT\"]\n    relations = Literal[\n        \"SUPPLIER_OF\",\n        \"COMPETITOR\",\n        \"PARTNERSHIP\",\n        \"ACQUISITION\",\n        \"WORKS_AT\",\n        \"SUBSIDIARY\",\n        \"BOARD_MEMBER\",\n        \"CEO\",\n        \"PROVIDES\",\n        \"HAS_EVENT\",\n        \"IN_LOCATION\",\n    ]\n\nAs you can see, we are focusing our graph extraction around people and\norganizations. Next, we will specify the relationships associated with each\nnode label.\n\n    \n    \n    # define which entities can have which relations\n    validation_schema = {\n        \"Person\": [\"WORKS_AT\", \"BOARD_MEMBER\", \"CEO\", \"HAS_EVENT\"],\n        \"Organization\": [\n            \"SUPPLIER_OF\",\n            \"COMPETITOR\",\n            \"PARTNERSHIP\",\n            \"ACQUISITION\",\n            \"WORKS_AT\",\n            \"SUBSIDIARY\",\n            \"BOARD_MEMBER\",\n            \"CEO\",\n            \"PROVIDES\",\n            \"HAS_EVENT\",\n            \"IN_LOCATION\",\n        ],\n        \"Product\": [\"PROVIDES\"],\n        \"Event\": [\"HAS_EVENT\", \"IN_LOCATION\"],\n        \"Location\": [\"HAPPENED_AT\", \"IN_LOCATION\"],\n    }\n\nFor example, a person can have the following relationships:\n\n  * WORKS_AT \n  * BOARD_MEMBER \n  * CEO \n  * HAS_EVENT \n\nThe schema is quite specific except for the EVENT node label, which is\nslightly more ambiguous and allows the LLM to capture various types of\ninformation.\n\nNow that we have defined the graph schema, we can input it into the `\nSchemaLLMPathExtractor ` and use it to construct a graph.\n\n    \n    \n    from llama_index.core import PropertyGraphIndex\n    \n    kg_extractor = SchemaLLMPathExtractor(\n        llm=llm,\n        possible_entities=entities,\n        possible_relations=relations,\n        kg_validation_schema=validation_schema,\n        # if false, allows for values outside of the schema\n        # useful for using the schema as a suggestion\n        strict=True,\n    )\n    \n    NUMBER_OF_ARTICLES = 250\n    \n    index = PropertyGraphIndex.from_documents(\n        documents[:NUMBER_OF_ARTICLES],\n        kg_extractors=[kg_extractor],\n        llm=llm,\n        embed_model=embed_model,\n        property_graph_store=graph_store,\n        show_progress=True,\n    )\n\nThis code extracts graph information from 250 news articles, but you can\nadjust the number how you see fit. There are 2500 articles in total.\n\n_Note that extracting 250 articles takes about 7 minutes with GPT-4o. However,\nyou can accelerate the process by employing parallelization through the_ _`\nnum_workers ` _ _parameter._\n\nWe can visualize a small subgraph to inspect what was stored.\n\nText chunks are blue, while entity nodes are all the rest.\n\nThe constructed graph contains both text chunks (blue), which contain text and\nembeddings. If an entity was mentioned in the text chunk, there is a `\nMENTIONS ` relationships between the text chunk and entity. Additionally,\nentities can have relationships to other entities.", "mimetype": "text/plain", "start_char_idx": 4315, "end_char_idx": 7839, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b6490f7c-7d73-48c8-8a4a-9ff7c0690f41": {"__data__": {"id_": "b6490f7c-7d73-48c8-8a4a-9ff7c0690f41", "embedding": null, "metadata": {"Header_2": " Entity deduplication", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03", "node_type": "4", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "acbe25d05327de8abfc6b12c09823aefbbf915a3e52ab410ca503b0b60695b5d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b603fcb-9ca2-4f06-a459-99a32e782c94", "node_type": "1", "metadata": {"Header_2": " Graph construction", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "5bd2353c748f80683eef34f0716ad77e4963862fd95dff0d3b48f71c80ba452c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "95833a00-577a-433f-8468-49b9e7ec5407", "node_type": "1", "metadata": {"Header_2": " Implementing a custom retriever"}, "hash": "586d7580941faa1858a2ed1fb411783b60c66715e4fdb7d441c566125d955cd5", "class_name": "RelatedNodeInfo"}}, "text": "Entity deduplication\n\nEntity deduplication or disambiguation is an important but often overlooked\nstep in graph construction. Essentially, it is a cleaning step where you try\nto match multiple nodes that represent a single entity and merge them together\ninto a single node for better graph structural integrity.\n\nFor example, in our constructed graph I could find some examples that could be\nmerged.\n\nPotential entity duplicates.\n\nWe will use a combination of text embedding similarity and word distance to\nfind potential duplicates. We start by defining the vector index on our\nentities in the graph.\n\n    \n    \n    graph_store.structured_query(\"\"\"\n    CREATE VECTOR INDEX entity IF NOT EXISTS\n    FOR (m:`__Entity__`)\n    ON m.embedding\n    OPTIONS {indexConfig: {\n     `vector.dimensions`: 1536,\n     `vector.similarity_function`: 'cosine'\n    }}\n    \"\"\")\n\nThe next Cypher query finds duplicates and is quite involved and I took me,\nMichael Hunger, and Eric Monk a couple of hours to perfect it.\n\n    \n    \n    similarity_threshold = 0.9\n    word_edit_distance = 5\n    data = graph_store.structured_query(\"\"\"\n    MATCH (e:__Entity__)\n    CALL {\n      WITH e\n      CALL db.index.vector.queryNodes('entity', 10, e.embedding)\n      YIELD node, score\n      WITH node, score\n      WHERE score > toFLoat($cutoff)\n          AND (toLower(node.name) CONTAINS toLower(e.name) OR toLower(e.name) CONTAINS toLower(node.name)\n               OR apoc.text.distance(toLower(node.name), toLower(e.name)) < $distance)\n          AND labels(e) = labels(node)\n      WITH node, score\n      ORDER BY node.name\n      RETURN collect(node) AS nodes\n    }\n    WITH distinct nodes\n    WHERE size(nodes) > 1\n    WITH collect([n in nodes | n.name]) AS results\n    UNWIND range(0, size(results)-1, 1) as index\n    WITH results, index, results[index] as result\n    WITH apoc.coll.sort(reduce(acc = result, index2 IN range(0, size(results)-1, 1) |\n            CASE WHEN index <> index2 AND\n                size(apoc.coll.intersection(acc, results[index2])) > 0\n                THEN apoc.coll.union(acc, results[index2])\n                ELSE acc\n            END\n    )) as combinedResult\n    WITH distinct(combinedResult) as combinedResult\n    // extra filtering\n    WITH collect(combinedResult) as allCombinedResults\n    UNWIND range(0, size(allCombinedResults)-1, 1) as combinedResultIndex\n    WITH allCombinedResults[combinedResultIndex] as combinedResult, combinedResultIndex, allCombinedResults\n    WHERE NOT any(x IN range(0,size(allCombinedResults)-1,1) \n        WHERE x <> combinedResultIndex\n        AND apoc.coll.containsAll(allCombinedResults[x], combinedResult)\n    )\n    RETURN combinedResult  \n    \"\"\", param_map={'cutoff': similarity_threshold, 'distance': word_edit_distance})\n    for row in data:\n        print(row)\n\nWithout getting into too many details, we use a combination of text embeddings\nand word distance to find potential duplicates in our graph. You can tune `\nsimilarity_threshold ` and ` word_distance ` to find the best combination that\ndetects as many duplicates without too much false positives. Unfortunately,\nentity disambiguation is a hard problem and there are no perfect solutions.\nWith this approach, we get quite good results, but there are some false\npositives in there as well:\n\n    \n    \n    ['1963 AFL Draft', '1963 NFL Draft']\n    ['June 14, 2023', 'June 15 2023']\n    ['BTC Halving', 'BTC Halving 2016', 'BTC Halving 2020', 'BTC Halving 2024', 'Bitcoin Halving', 'Bitcoin Halving 2024']\n\nIt is up to you to tweak the dials, and maybe add some manual exceptions\nbefore merging duplicate nodes.", "mimetype": "text/plain", "start_char_idx": 7845, "end_char_idx": 11451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95833a00-577a-433f-8468-49b9e7ec5407": {"__data__": {"id_": "95833a00-577a-433f-8468-49b9e7ec5407", "embedding": null, "metadata": {"Header_2": " Implementing a custom retriever", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03", "node_type": "4", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "acbe25d05327de8abfc6b12c09823aefbbf915a3e52ab410ca503b0b60695b5d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6490f7c-7d73-48c8-8a4a-9ff7c0690f41", "node_type": "1", "metadata": {"Header_2": " Entity deduplication", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "ca1e18b7a7111a26cdc4dcb83e4b5fc6b4eb947408ad4da0796a88a3d393874e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "732a3aaf-4b73-4ec0-97fb-867ae5c10bd7", "node_type": "1", "metadata": {"Header_2": " Question-answering flow"}, "hash": "77375eb74f8f229e06dbd6d71fa5e855f333012168973fc33049b864c756eddc", "class_name": "RelatedNodeInfo"}}, "text": "Implementing a custom retriever\n\nGreat, we have constructed a knowledge graph based on the news dataset. Now,\nlet\u2019s examine our retriever options. At the moment, there are [ four existing\nretrievers available\n](https://docs.llamaindex.ai/en/latest/module_guides/indexing/lpg_index_guide/#retrieval-\nand-querying) :\n\n  * [ LLMSynonymRetriever ](https://docs.llamaindex.ai/en/latest/module_guides/indexing/lpg_index_guide/#default-llmsynonymretriever) : takes the query, and tries to generate keywords and synonyms to retrieve nodes (and therefore the paths connected to those nodes). \n  * [ VectorContextRetriever ](https://docs.llamaindex.ai/en/latest/module_guides/indexing/lpg_index_guide/#default-if-supported-vectorcontextretriever) : retrieves nodes based on their vector similarity, and then fetches the paths connected to those nodes \n  * [ TextToCypherRetriever ](https://docs.llamaindex.ai/en/latest/module_guides/indexing/lpg_index_guide/#texttocypherretriever) : uses a graph store schema, your query, and a prompt template in order to generate and execute a cypher query \n  * [ CypherTemplateRetriever ](https://docs.llamaindex.ai/en/latest/module_guides/indexing/lpg_index_guide/#cyphertemplateretriever) : Rather than letting the LLM have free-range of generating any cypher statement, we can instead provide a cypher template and have the LLM fill in the parameters. \n\nAdditionally, implementing a custom retriever is straightforward, so that is\nexactly what we will do here. Our custom retriever will first identify\nentities in the input query and then execute the VectorContextRetriever for\neach identified entity separately.\n\nFirst, we will define the entity extraction model and prompt.\n\n    \n    \n    from pydantic import BaseModel\n    from typing import Optional, List\n    \n    \n    class Entities(BaseModel):\n        \"\"\"List of named entities in the text such as names of people, organizations, concepts, and locations\"\"\"\n        names: Optional[List[str]]\n    \n    \n    prompt_template_entities = \"\"\"\n    Extract all named entities such as names of people, organizations, concepts, and locations\n    from the following text:\n    {text}\n    \"\"\"\n\nNow we can progress to the custom retriever implementation.\n\n    \n    \n    from typing import Any, Optional\n    \n    from llama_index.core.embeddings import BaseEmbedding\n    from llama_index.core.retrievers import CustomPGRetriever, VectorContextRetriever\n    from llama_index.core.vector_stores.types import VectorStore\n    from llama_index.program.openai import OpenAIPydanticProgram\n    \n    \n    class MyCustomRetriever(CustomPGRetriever):\n        \"\"\"Custom retriever with entity detection.\"\"\"\n        def init(\n            self,\n            ## vector context retriever params\n            embed_model: Optional[BaseEmbedding] = None,\n            vector_store: Optional[VectorStore] = None,\n            similarity_top_k: int = 4,\n            path_depth: int = 1,\n            include_text: bool = True,\n            **kwargs: Any,\n        ) -> None:\n            \"\"\"Uses any kwargs passed in from class constructor.\"\"\"\n            self.entity_extraction = OpenAIPydanticProgram.from_defaults(\n                output_cls=Entities, prompt_template_str=prompt_template_entities\n            )\n            self.vector_retriever = VectorContextRetriever(\n                self.graph_store,\n                include_text=self.include_text,\n                embed_model=embed_model,\n                similarity_top_k=similarity_top_k,\n                path_depth=path_depth,\n            )\n    \n        def custom_retrieve(self, query_str: str) -> str:\n            \"\"\"Define custom retriever with entity detection.\n    \n            Could return `str`, `TextNode`, `NodeWithScore`, or a list of those.\n            \"\"\"\n            entities = self.entity_extraction(text=query_str).names\n            result_nodes = []\n            if entities:\n                print(f\"Detected entities: {entities}\")\n                for entity in entities:\n                    result_nodes.extend(self.vector_retriever.retrieve(entity))\n            else:\n                result_nodes.extend(self.vector_retriever.retrieve(query_str))\n            final_text = \"\\n\\n\".join(\n                [n.get_content(metadata_mode=\"llm\") for n in result_nodes]\n            )\n            return final_text\n\nThe ` MyCustomRetriever ` class has only two methods. You can use the ` init `\nmethod to instantiate any functions or classes you will be using in the\nretriever. In this example, we instantiate the entity detection OpenAI program\nalong with the vector context retriever.\n\nThe ` custom_retrieve ` method is called during retrieval. In our custom\nretriever implementation, we first identify any relevant entities in the text.\nIf any entities are found, we iterate and execute the vector context retriever\nfor each entity. On the other hand, if no entities are identified we pass the\nentire input to the vector context retriever.\n\nAs you can observe, you can easily customize the retriever for your use-case\nby incorporating existing retrievers or starting from scratch as you can\neasily execute Cypher statements by using the ` structured_query ` method of\nthe graph store.", "mimetype": "text/plain", "start_char_idx": 11457, "end_char_idx": 16654, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "732a3aaf-4b73-4ec0-97fb-867ae5c10bd7": {"__data__": {"id_": "732a3aaf-4b73-4ec0-97fb-867ae5c10bd7", "embedding": null, "metadata": {"Header_2": " Question-answering flow", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03", "node_type": "4", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "acbe25d05327de8abfc6b12c09823aefbbf915a3e52ab410ca503b0b60695b5d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "95833a00-577a-433f-8468-49b9e7ec5407", "node_type": "1", "metadata": {"Header_2": " Implementing a custom retriever", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "619c4da691a56fc671be434171e91e3e6c39e8a6a55536dfee08d50c42f6a4d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc660fa8-e85e-4bde-9ceb-060701fcd0fc", "node_type": "1", "metadata": {"Header_2": " Summary"}, "hash": "b3caf454ba3de08b4b0a7c2741d16d8a09b93ffcedbb1634c41af2be967e2785", "class_name": "RelatedNodeInfo"}}, "text": "Question-answering flow\n\nLet\u2019s wrap it up by using the custom retriever to answer an example question.\nWe need to pass the retriever to the ` RetrieverQueryEngine ` .\n\n    \n    \n    from llama_index.core.query_engine import RetrieverQueryEngine\n    \n    custom_sub_retriever = MyCustomRetriever(\n        index.property_graph_store,\n        include_text=True,\n        vector_store=index.vector_store,\n        embed_model=embed_model\n    )\n    \n    query_engine = RetrieverQueryEngine.from_args(\n        index.as_retriever(sub_retrievers=[custom_sub_retriever]), llm=llm\n    )\n\nLet\u2019s test it out!\n\n    \n    \n    response = query_engine.query(\n        \"What do you know about Maliek Collins or Darragh O\u2019Brien?\"\n    )\n    print(str(response))\n    # Detected entities: ['Maliek Collins', \"Darragh O'Brien\"]\n    # Maliek Collins is a defensive tackle who has played for the Dallas Cowboys, Las Vegas Raiders, and Houston Texans. Recently, he signed a two-year contract extension with the Houston Texans worth $23 million, including a $20 million guarantee. This new deal represents a raise from his previous contract, where he earned $17 million with $8.5 million guaranteed. Collins is expected to be a key piece in the Texans' defensive line and fit well into their 4-3 alignment.\n    # Darragh O\u2019Brien is the Minister for Housing and has been involved in the State\u2019s industrial relations process and the Government. He was recently involved in a debate in the D\u00e1il regarding the pay and working conditions of retained firefighters, which led to a heated exchange and almost resulted in the suspension of the session. O\u2019Brien expressed confidence that the dispute could be resolved and encouraged unions to re-engage with the industrial relations process.", "mimetype": "text/plain", "start_char_idx": 16660, "end_char_idx": 18412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc660fa8-e85e-4bde-9ceb-060701fcd0fc": {"__data__": {"id_": "bc660fa8-e85e-4bde-9ceb-060701fcd0fc", "embedding": null, "metadata": {"Header_2": " Summary", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03", "node_type": "4", "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "acbe25d05327de8abfc6b12c09823aefbbf915a3e52ab410ca503b0b60695b5d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "732a3aaf-4b73-4ec0-97fb-867ae5c10bd7", "node_type": "1", "metadata": {"Header_2": " Question-answering flow", "filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}, "hash": "8edd4e3c2b5a09d24c4be6c705dad71090a719201703bb9929ac6c6a428581e5", "class_name": "RelatedNodeInfo"}}, "text": "Summary\n\nIn this blog post, we\u2019ve explored the intricacies of customizing the property\ngraph index within LlamaIndex, focusing on implementing entity deduplication\nand designing custom retrieval methods to enhance GraphRAG accuracy. The\nproperty graph index allows for a modular and flexible approach, utilizing\nvarious graph constructors and retrievers to tailor the implementation to your\nspecific needs. Whether you\u2019re building your first knowledge graph or\noptimizing for a unique dataset, these customizable components offer a\npowerful toolkit. We invite you to test out the property graph index\nintegration to see how they can elevate your knowledge graph projects.\n\nAs always, the code is available on [ GitHub\n](https://github.com/tomasonjo/blogs/blob/master/llm/llama_index_neo4j_custom_retriever.ipynb)\n.", "mimetype": "text/plain", "start_char_idx": 18418, "end_char_idx": 19232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"614b01e4-7e76-4ec3-8df8-fbc7ac71f116": {"doc_hash": "36c379ed3ee9fb6df34dd3fec3666328173291a76eb448e918df3356ffcb7fc7", "ref_doc_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03"}, "8cd82d02-330f-4d19-b363-31435029f495": {"doc_hash": "0b17b0b90219744dc8f650ceb1d2032c8411c78f1a4b6d22bbccb09719c79e45", "ref_doc_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03"}, "bce8d8b2-1007-472a-a601-6cf5dfc104c7": {"doc_hash": "f9868c27277428564f0bc989c933bb120810016805bf40e46c581c827e6841fb", "ref_doc_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03"}, "9b603fcb-9ca2-4f06-a459-99a32e782c94": {"doc_hash": "5bd2353c748f80683eef34f0716ad77e4963862fd95dff0d3b48f71c80ba452c", "ref_doc_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03"}, "b6490f7c-7d73-48c8-8a4a-9ff7c0690f41": {"doc_hash": "ca1e18b7a7111a26cdc4dcb83e4b5fc6b4eb947408ad4da0796a88a3d393874e", "ref_doc_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03"}, "95833a00-577a-433f-8468-49b9e7ec5407": {"doc_hash": "619c4da691a56fc671be434171e91e3e6c39e8a6a55536dfee08d50c42f6a4d7", "ref_doc_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03"}, "732a3aaf-4b73-4ec0-97fb-867ae5c10bd7": {"doc_hash": "8edd4e3c2b5a09d24c4be6c705dad71090a719201703bb9929ac6c6a428581e5", "ref_doc_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03"}, "bc660fa8-e85e-4bde-9ceb-060701fcd0fc": {"doc_hash": "8232f779f041e3b870bdb87b097f5f00197dc81642dd3ac5f83ac0305cf7171a", "ref_doc_id": "90eca5a1-b279-40dc-8e03-bc0f8bceee03"}}, "docstore/ref_doc_info": {"90eca5a1-b279-40dc-8e03-bc0f8bceee03": {"node_ids": ["614b01e4-7e76-4ec3-8df8-fbc7ac71f116", "8cd82d02-330f-4d19-b363-31435029f495", "bce8d8b2-1007-472a-a601-6cf5dfc104c7", "9b603fcb-9ca2-4f06-a459-99a32e782c94", "b6490f7c-7d73-48c8-8a4a-9ff7c0690f41", "95833a00-577a-433f-8468-49b9e7ec5407", "732a3aaf-4b73-4ec0-97fb-867ae5c10bd7", "bc660fa8-e85e-4bde-9ceb-060701fcd0fc"], "metadata": {"filename": "customizing-property-graph-index-in-llamaindex.md", "extension": ".md", "title": "Customizing property graph index in LlamaIndex", "date": "Jun 11, 2024", "url": "https://www.llamaindex.ai/blog/customizing-property-graph-index-in-llamaindex"}}}}