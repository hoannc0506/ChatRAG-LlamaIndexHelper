{"docstore/data": {"11347994-52e2-4ffc-8c26-aeebc52dd3aa": {"__data__": {"id_": "11347994-52e2-4ffc-8c26-aeebc52dd3aa", "embedding": null, "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "75cc4a8f-ae2d-411a-a4ed-d8b0231d51f6", "node_type": "1", "metadata": {"Header_1": " Background/Context"}, "hash": "3da53e2efcaf99801f239a6a51a593fc31f1b598338bf4fc7e080c6289bb20de", "class_name": "RelatedNodeInfo"}}, "text": "In this article I wanted to share the process of adding new data loaders to\nLlamaIndex. First we\u2019ll look at what LlamaIndex is and try a simple example of\nproviding additional context to an LLM query using a simple CSV loader. Then\nwe look at how easy it is to add a new loader for graph databases to\nLlamaIndex. And lastly we try that new loader and another loader for GraphQL\nAPIs that I added in practice and see how their extra context can help an LLM\nanswer questions better.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 480, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75cc4a8f-ae2d-411a-a4ed-d8b0231d51f6": {"__data__": {"id_": "75cc4a8f-ae2d-411a-a4ed-d8b0231d51f6", "embedding": null, "metadata": {"Header_1": " Background/Context", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11347994-52e2-4ffc-8c26-aeebc52dd3aa", "node_type": "1", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "59ab2832503e9df577160c9441c7356e0ed64ff5e456614cb075f16be2289e71", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "873b017e-03ca-471e-a8f2-49b497a4207d", "node_type": "1", "metadata": {"Header_1": " Using a Basic CSV Loader"}, "hash": "f1a0b508f5802abd7598112c6bd8ab8d1625013b9834bbcc42d55506cbd907d5", "class_name": "RelatedNodeInfo"}}, "text": "Background/Context\n\nI was listening to the [ \"This Week in ML\" (twiml) Podcast\n](https://medium.com/llamaindex-blog/llamaindex-on-twiml-ai-a-distilled-\nsummary-using-llamaindex-de2a88551595) where [ Jerry Liu\n](https://medium.com/u/e76da1c45ef7?source=post_page-----\nbcaecec262d7--------------------------------) from LlamaIndex (previously GPT-\nIndex) explained the ideas behind the library to enrich query contexts to LLMs\nwith data from any number of sources.\n\n[ LlamaIndex ](https://gpt-index.readthedocs.io/en/latest/index.html) is a\ntoolkit to augment LLMs with your own (private) data using in-context\nlearning. It takes care of selecting the right context to retrieve from large\nknowledge bases. To achieve that it utilizes a number of connectors or loaders\n(from [ LlamaHub ](https://llamahub.ai/) ) and data structures (indices) to\nefficiently provide the pre-processed data as ` Documents ` .\n\nEach type of index stores documents in different ways, e.g via embeddings for\nvector search, as a simple list or graph or tree structure. Those indices are\nused as query interface to the LLM, transparently embedding the relevant\ncontext.\n\nBesides the higher quality response from the LLM, you get also the documents\nreturned that have been used to construct the answer. LlamaIndex also allows\nchain of thought reasoning, compare/contrast queries, and natural language\nquerying of databases.\n\nSee also this presentation from Jerry:\n\nAll the code for the blog post is available in this [ Colab Notebook\n](https://colab.research.google.com/drive/1NUrIoiOh692LaQkBHEmnD-5IuLBpBqGJ#scrollTo=JN4gqQF-\nNRwj) .", "mimetype": "text/plain", "start_char_idx": 485, "end_char_idx": 2092, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "873b017e-03ca-471e-a8f2-49b497a4207d": {"__data__": {"id_": "873b017e-03ca-471e-a8f2-49b497a4207d", "embedding": null, "metadata": {"Header_1": " Using a Basic CSV Loader", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75cc4a8f-ae2d-411a-a4ed-d8b0231d51f6", "node_type": "1", "metadata": {"Header_1": " Background/Context", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "fde456a4bb7950118989c69a9fb14aa24d7deac4ef42afb58b035979f72714f1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a3694fcb-dbc2-4cc4-b288-344ad76d06f6", "node_type": "1", "metadata": {"Header_1": " LlamaIndex Loaders"}, "hash": "e7539b3ea0103730ec0ba175bf6b5d14ebcc1aaa06c809de10d522fe1d79d39b", "class_name": "RelatedNodeInfo"}}, "text": "Using a Basic CSV Loader\n\nHere is an example of using a basic CSV loader to provide documents for\nLlamaIndex.\n\nIn our Notebook we download the ` countries.csv ` via the [ Countries List\nProject ](https://annexare.github.io/Countries/) (MIT) ( [ raw source\n](https://raw.githubusercontent.com/annexare/Countries/master/dist/countries.csv)\n).\n\nOur dependencies are ` llama-index ` and ` python-dotenv ` .\n\n    \n    \n    !pip install llama-index==0.6.19 python-dotenv\n\nWe need to provide our OpenAI-api key, to avoid accidentally leaking it in the\nnotebook, I uploaded an ` openai.env ` file and use the ` dotenv ` library to\nload the contents as environment variables.\n\nIn the next step we load the env file and prepare the OpenAI `\nChatGPTLLMPredictor ` (using ` gpt-3.5-turbo ` by default) and add it to the `\nServiceContext ` .\n\n    \n    \n    import os\n    from pathlib import Path\n    from llama_index import GPTVectorStoreIndex, SimpleDirectoryReader, ServiceContext, GPTListIndex\n    from llama_index.llm_predictor.chatgpt import ChatGPTLLMPredictor\n    from dotenv import load_dotenv\n    from llama_index import download_loader\n    \n    load_dotenv(\"openai.env\")\n    \n    llm_predictor = ChatGPTLLMPredictor()\n    service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor)\n\nNow we can use the loader to load the CSV and turn it into documents, create\nan an GPT Index ( ` VectorStoreIndex ` in this case), which LlamaIndex can\nthen use to retrieve the relevant information to pass along in the context to\nthe LLM.\n\nInitializing CSV Loader and GPTVectorStoreIndex\n\n    \n    \n    SimpleCSVReader = download_loader(\"SimpleCSVReader\")\n    loader = SimpleCSVReader(concat_rows=False)\n    documents = loader.load_data(file=Path('./countries.csv'))\n    \n    print(documents)\n    index = GPTVectorStoreIndex.from_documents(documents, service_context=service_context)\n\nDocuments from the CSV Loader\n\n    \n    \n    [Document(text='country, capital, type', doc_id='67c30c68-7d9f-4906-945b-9affc96f95d2', embedding=None, doc_hash='3a506ebea9c04655b51406d79fdf5e3a87c3d8ff5b5387aace3e5a79711a21b8', extra_info=None),\n    Document(text='Abkhazia, Sukhumi, countryCapital', doc_id='6e6be4b5-051f-48e0-8774-6d48e0444785', embedding=None, doc_hash='ea387d0eab94cc6c59f98c473ac1f0ee64093901673b43e1c0d163bbc203026e', extra_info=None),\n    ...]\n\nThe CSV loader didn\u2019t create one Document per CSV row by default, but only one\nfor the whole document, but you could configure it so that it turned the CSV\ninto one document per row.\n\nLlamaIndex supports much more involved setups of different kinds of indexes,\nallows to chain them and even conditionally select one or the other. Here we\njust do the bare minimum to demonstrate our loaders.\n\nAfter setting up the indices with the appropriate loaders, and connected\nindexes, we now can use the index as an LLM query engine and execute our user\nquery.\n\nTo demonstrate that the LLM still is able to use its world knowledge, we can\nask in a mix of English (System), German (Question) and French (requested\nAnswer).\n\n    \n    \n    queryEngine = index.as_query_engine()\n    \n    queryEngine.query(\"\"\"\n    Provide the answer in French.\n    Question: Was ist die Hauptstadt von Albanien?\n    \"\"\")\n\nAs you can see in the response below it doesn\u2019t just answer our question\ncorrectly in French ` La capitale de l\u2019Albanie est Tirana. ` , but also\nprovides which documents it used to generate the answer.\n\n    \n    \n    Response(response=\"La capitale de l'Albanie est Tirana.\", \n    source_nodes=[NodeWithScore(node=Node(text='              &lt;td&gt;Albania&lt;/td&gt;', doc_id='3decbee1-98cc-4650-a071-ed25cd3e00d5', embedding=None, doc_hash='7d9d85082095471a9663690742d2d49fc37b2ec37cc5acf4e99e006a68a17742', extra_info=None, \n    node_info={'start': 0, 'end': 30, '_node_type': &lt;NodeType.TEXT: '1'&gt;}, \n    relationships={&lt;DocumentRelationship.SOURCE: '1'&gt;: '7b6c861f-2c2f-4905-a047-edfc25f7df19'}), score=0.7926356007369129), \n    NodeWithScore(node=Node(text='              &lt;td&gt;Algiers&lt;/td&gt;', doc_id='8111b737-9f45-4855-8cd8-f958d4eb0ccd', embedding=None, doc_hash='8570a02a057a6ebbd0aff6d3f63c9f29a0ee858a81d913298d31b025101d1e44', \n    extra_info=None, node_info={'start': 0, 'end': 30, '_node_type': &lt;NodeType.TEXT: '1'&gt;}, relationships={&lt;DocumentRelationship.SOURCE: '1'&gt;: '22e11ac6-8375-4d0c-91c6-4750fc63a375'}), score=0.7877589022795918)], extra_info={'3decbee1-98cc-4650-a071-ed25cd3e00d5': None, '8111b737-9f45-4855-8cd8-f958d4eb0ccd': None})", "mimetype": "text/plain", "start_char_idx": 2097, "end_char_idx": 6624, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3694fcb-dbc2-4cc4-b288-344ad76d06f6": {"__data__": {"id_": "a3694fcb-dbc2-4cc4-b288-344ad76d06f6", "embedding": null, "metadata": {"Header_1": " LlamaIndex Loaders", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "873b017e-03ca-471e-a8f2-49b497a4207d", "node_type": "1", "metadata": {"Header_1": " Using a Basic CSV Loader", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "2ffa62269c8abe3d24e145691f6c0f7cdd4b82ca0de5321dd89930531c868743", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f59c05e-d02a-479c-aef3-d64339c9ef4a", "node_type": "1", "metadata": {"Header_1": " Adding the new loaders"}, "hash": "d4e2f93efee44dcd006eb4140e0baf03b7db9531fdee5007fd8db0363e4a49bf", "class_name": "RelatedNodeInfo"}}, "text": "LlamaIndex Loaders\n\nThe number of existing data sources in [ LlamaHub ](https://llamahub.ai/) is\nimpressive, I counted 100+ integrations in [ the repository\n](https://github.com/emptycrown/llama-hub) . You can find anything from Google\ndocs, to GitHub, to relational databases.\n\nLlamaHub, screenshot by Author\n\nBut I was missing two of my favorite technologies: GraphQL - the API query\nlanguage open sourced by Facebook and Graph databases like Neo4j, the best way\nto store and manage large amounts of connected data, for example in Knowledge\nGraphs.\n\n> So I thought: \"How hard can it be to add them :)\"", "mimetype": "text/plain", "start_char_idx": 6629, "end_char_idx": 7232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f59c05e-d02a-479c-aef3-d64339c9ef4a": {"__data__": {"id_": "2f59c05e-d02a-479c-aef3-d64339c9ef4a", "embedding": null, "metadata": {"Header_1": " Adding the new loaders", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a3694fcb-dbc2-4cc4-b288-344ad76d06f6", "node_type": "1", "metadata": {"Header_1": " LlamaIndex Loaders", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "7d3adcb5f483716a369bab2636c3c61235f4a56dc8c6d8764f63523e0e52b5d2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d41c5712-5fbd-48df-ae10-b06b883b63eb", "node_type": "1", "metadata": {"Header_1": " Adding the Graph Database Loader"}, "hash": "99be11f0afa13c1cefc4d00be4d8ceba97dd42577129622fc4be783a6d652b9c", "class_name": "RelatedNodeInfo"}}, "text": "Adding the new loaders\n\nAdding new loaders is really straightforward. There is a script in the llama-\nhub repository to help with adding a new loader. Running ` ./add-loader.sh\n<folder> ` added the skeleton files.\n\nTo get familiar with the existing implementations I looked at the [ Databases\n(relational) ](https://github.com/emptycrown/llama-\nhub/tree/main/llama_hub/database) and [ MongoDB integrations\n](https://github.com/emptycrown/llama-hub/tree/main/llama_hub/mongo) , the\nformer for the Graph Database and the latter for the GraphQL.\n\nIt was easy enough, we only needed the requirements for our loader, implement\nthe ` base.py ` with an straightforward API and a ` README.md` ` with an\nexplanation and a code example.\n\nThe main difference my loaders have from the existing ones, is that they don\u2019t\nuse hard-coded field names for extracting the relevant value from the query\nresult, but instead turn the result into YAML.\n\nI picked YAML not because I like it, but because it was closest to a textual\nrepresentation of a nested tree of key-value pairs that a user would write as\nnested bullet lists.\n\nBelow is the example code for the Graph Database implementation (the GraphQL\none is similar).", "mimetype": "text/plain", "start_char_idx": 7237, "end_char_idx": 8438, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d41c5712-5fbd-48df-ae10-b06b883b63eb": {"__data__": {"id_": "d41c5712-5fbd-48df-ae10-b06b883b63eb", "embedding": null, "metadata": {"Header_1": " Adding the Graph Database Loader", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f59c05e-d02a-479c-aef3-d64339c9ef4a", "node_type": "1", "metadata": {"Header_1": " Adding the new loaders", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "60414b1ce0bb50714ed8d2d7f080a52c4753853acb37733db0a0e3048c720fef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3e140c9-2856-4d60-81e4-a1c6d430ebab", "node_type": "1", "metadata": {"Header_1": " Using the Graph Database Loader"}, "hash": "fe435a2c29af0c9ec536a5b338f05fd0fd4ca8b714b24b371914efb1ae7bd53d", "class_name": "RelatedNodeInfo"}}, "text": "Adding the Graph Database Loader\n\nI added the requirements for the ` neo4j ` dependency, a Cypher query language\nover Bolt protocol python driver, that also works with Memgraph and AWS\nNeptune.\n\nThen I added the code for ` ___init___ ` to take in a database server URI,\ndatabase name and credentials to connect and create a driver instance.\n\nThe ` load_data ` method takes in the query to run and optional parameters.\nIt\u2019s implemented by calling the driver\u2019s ` execute_query ` method.\n\nEach row of results is mapped into a LlamaIndex ` Document ` with the ` text `\nbeing the YAML representation of the results.\n\n    \n    \n    \"\"\"Graph Database Cypher Reader.\"\"\"\n    \n    from typing import Dict, List, Optional\n    \n    from llama_index.readers.base import BaseReader\n    from llama_index.readers.schema.base import Document\n    \n    import yaml\n    \n    class GraphDBCypherReader(BaseReader):\n        \"\"\"Graph database Cypher reader.\n    \n        Combines all Cypher query results into the Document type used by LlamaIndex.\n    \n        Args:\n            uri (str): Graph Database URI\n            username (str): Username\n            password (str): Password\n    \n        \"\"\"\n    \n        def __init__(\n            self,\n            uri: str,\n            username: str,\n            password: str,\n            database: str\n        ) -&gt; None:\n            \"\"\"Initialize with parameters.\"\"\"\n            try:\n                from neo4j import GraphDatabase, basic_auth\n    \n            except ImportError:\n                raise ImportError(\n                    \"`neo4j` package not found, please run `pip install neo4j`\"\n                )\n            if uri:\n                if uri is None:\n                    raise ValueError(\"`uri` must be provided.\")\n                self.client = GraphDatabase.driver(uri=uri, auth=basic_auth(username, password))\n                self.database = database\n    \n        def load_data(\n            self, query: str, parameters: Optional[Dict] = None\n        ) -&gt; List[Document]:\n            \"\"\"Run the Cypher with optional parameters and turn results into documents\n    \n            Args:\n                query (str): Graph Cypher query string.\n                parameters (Optional[Dict]): optional query parameters.\n    \n            Returns:\n                List[Document]: A list of documents.\n    \n            \"\"\"\n            if parameters is None:\n                parameters = {}\n    \n            records, summary, keys = self.client.execute_query(query, parameters, database_ = self.database)\n    \n            documents = [Document(yaml.dump(entry.data())) for entry in records]\n    \n            return documents\n\nYou\u2019re now ready to start using the data loader. If you want to start using\nthis in your code, simply import `GraphDBCypherReader` from the relevant file\nand follow the steps below.\n\nIf you wish to submit the loader on LlamaHub, the process is fairly\nstraightforward. After adding an example to the readme which uses an always-on\ndemo server with StackOverflow data, I was ready to create a [ pull request\n](https://github.com/emptycrown/llama-hub/pull/266) . After a short discussion\nthe PR was quickly merged.\n\nThanks a lot Jerry for the smooth experience.\n\nNow let\u2019s see how to use our two loaders.", "mimetype": "text/plain", "start_char_idx": 8443, "end_char_idx": 11701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3e140c9-2856-4d60-81e4-a1c6d430ebab": {"__data__": {"id_": "d3e140c9-2856-4d60-81e4-a1c6d430ebab", "embedding": null, "metadata": {"Header_1": " Using the Graph Database Loader", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d41c5712-5fbd-48df-ae10-b06b883b63eb", "node_type": "1", "metadata": {"Header_1": " Adding the Graph Database Loader", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "c36b71e0626380e6c19fd795a889ec0fc8ef1e0d44a783f4268b6a4562b380ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7e810623-1c95-44c8-b4ec-676ddd02c17d", "node_type": "1", "metadata": {"Header_1": " Using the GraphQL Loader"}, "hash": "1ea691da27c4adcbcc8d9e5bda52937a938e728750dae978e3ff067bf9131c74", "class_name": "RelatedNodeInfo"}}, "text": "Using the Graph Database Loader\n\nThe GraphDB Cypher loader, connects to graph databases, which are specialized\ndatabases that store data not in tables but in entities ( _Nodes_ ) and their\n_Relationships_ . Because they are schema free, you can store real-world\nknowledge without compromising on richness.\n\nImage for \u201cNetwork Graph\u201d generated by Midjourney by Author\n\nRelationships can also hold attributes, which can represent time, weights,\ncosts or whatever defines the concrete relationship. Any node can have as many\nor as few attributes or relationships as needed.\n\n> To query a graph database you can use the ` _Cypher_ ` query language, a\n> pattern based language that expresses those relationships in visual ascii-\n> art patterns. You encircle nodes in parentheses ` _()_ ` and draw\n> relationships as arrows ` _-- > _ ` with additional constraints put in\n> square brackets. Otherwise Cypher provides many features known from SQL and\n> also supports many graph operations as well as handling data structures like\n> nested documents, of lists and dicts.\n\nLet\u2019s use a movie graph database and ask the LLM a question about **_common\naction movie plots_ ** .\n\nSetting up the ` ServiceContext ` and the ` ChatGPTLLMPredictor ` is the same\nas before.\n\nThen we get the ` GraphDBCypherReader ` and connect it to our database (with\nan small example movie graph from [ TheMovieDB ](https://themoviedb.org) with\npermission).\n\n    \n    \n    GraphDBCypherReader = download_loader('GraphDBCypherReader')\n    \n    reader = GraphDBCypherReader(uri = \"neo4j+s://demo.neo4jlabs.com\", \\\n        username = \"recommendations\", password = \"recommendations\", database = \"recommendations\")\n\nThen we define our query to the graph database with a parameter of year that\nallows us to pick more recent movies. When loading the data, each row of\nresults should turn into one ` Document ` where the ` text ` property of the\ndocument is the YAML representation of the row.\n\n    \n    \n    query = \"\"\"\n        MATCH (m:Movie)-[rel:ACTED_IN|DIRECTED|IN_GENRE]-(other)\n        WHERE $year &lt; m.year and m.imdbRating &gt; $rating\n        WITH m, type(rel) as relation, collect(other.name) as names\n        RETURN m.title as title, m.year as year, m.plot as plot, relation, names\n        ORDER BY m.year ASC\n    \"\"\"\n    \n    documents = reader.load_data(query, parameters = {\"year\":1990,\"rating\":8})\n    index = GPTVectorStoreIndex.from_documents(documents, service_context=service_context)\n    \n    print(len(documents))\n    print(documents[0:5])\n\nThe output will look similar to the following:\n\n    \n    \n    829\n    [Document(text='names:\\n- Saifei He\\n- Li Gong\\n- Jingwu Ma\\n- Cuifen Cao\\nplot: A young woman becomes the fourth wife of a wealthy lord, and must learn to live\\n  with the strict rules and tensions within the household.\\nrelation: ACTED_IN\\ntitle: Raise the Red Lantern (Da hong deng long gao gao gua)\\nyear: 1991\\n', doc_id='782d9a63-251b-4bb8-aa3d-5d8f6d1fb5d2', embedding=None, doc_hash='f9fd966bc5f2234e94d09efebd3be008db8c891f8666c1a364abf7812f5d7a1c', extra_info=None), Document(text='names:\\n- Yimou Zhang\\nplot: A young woman becomes the fourth wife of a wealthy lord, and must learn to live\\n  with the strict rules and tensions within the household.\\nrelation: DIRECTED\\ntitle: Raise the Red Lantern (Da hong deng long gao gao gua)\\nyear: 1991\\n', doc_id='2e13caf6-b9cf-4263-a264-7121bc77d1ee', embedding=None, doc_hash='e1f340ed1fac2f1b8d6076cfc2c9e9cb0109d5d11e5dcdbf3a467332f5995cb1', extra_info=None), ...]\n\nNow we can use our ` index ` to run a LLM query to answer the questions we\nwanted to pose.\n\n    \n    \n    queryEngine= index.as_query_engine()\n    \n    queryEngine.query(\"\"\"\n    What are the most common plots in action movies?\n    \"\"\")\n\nThe answer shows that the LLM can utilize the inputs, understands the genre\n\"action movies\" and can summarize their plots. Here is its answer.\n\n> Based on the given context information, it appears that the most common\n> plots in action movies are heists and battles against controlling forces.\n> However, it is important to note that this conclusion is based on a limited\n> sample size and may not be representative of all action movies.\n    \n    \n    Response(response='Based on the given context information, it appears that the most common plots in action movies are heists and battles against controlling forces. However, it is important to note that this conclusion is based on a limited sample size and may not be representative of all action movies.',\n    \n    \n    source_nodes=[NodeWithScore(node=Node(text='names:\\n- Action\\n- Crime\\n- Thriller\\nplot: A group of professional bank robbers start to feel the heat from police when\\n  they unknowingly leave a clue at their latest heist.\\nrelation: IN_GENRE\\ntitle: Heat\\nyear: 1995\\n', doc_id='bb117618-1cce-4cec-bd9b-8645ab0b50a3', embedding=None, doc_hash='4d493a9f33eb7a1c071756f61e1975ae5c313ecd42243f81a8827919a618468b', extra_info=None, node_info={'start': 0, 'end': 215, '_node_type': &lt;NodeType.TEXT: '1'&gt;}, relationships={&lt;DocumentRelationship.SOURCE: '1'&gt;: 'dbfffdae-d88c-49e2-9d6b-83dad427a3f3'}), score=0.8247381316731472), NodeWithScore(node=Node(text='names:\\n- Thriller\\n- Sci-Fi\\n- Action\\nplot: A computer hacker learns from mysterious rebels about the true nature of his\\n  reality and his role in the war against its controllers.\\nrelation: IN_GENRE\\ntitle: Matrix, The\\nyear: 1999\\n', doc_id='c4893c61-32ee-4d05-b559-1f65a5197e5e', embedding=None, doc_hash='0b6a080bf712548099c5c8c1b033884a38742c73dc23d420ac2e677e7ece82f4', extra_info=None, node_info={'start': 0, 'end': 227, '_node_type': &lt;NodeType.TEXT: '1'&gt;}, relationships={&lt;DocumentRelationship.SOURCE: '1'&gt;: '6c8dea11-1371-4f5a-a1a1-7f517f027008'}), score=0.8220633045996049)], extra_info={'bb117618-1cce-4cec-bd9b-8645ab0b50a3': None, 'c4893c61-32ee-4d05-b559-1f65a5197e5e': None})", "mimetype": "text/plain", "start_char_idx": 11706, "end_char_idx": 17599, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e810623-1c95-44c8-b4ec-676ddd02c17d": {"__data__": {"id_": "7e810623-1c95-44c8-b4ec-676ddd02c17d", "embedding": null, "metadata": {"Header_1": " Using the GraphQL Loader", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3e140c9-2856-4d60-81e4-a1c6d430ebab", "node_type": "1", "metadata": {"Header_1": " Using the Graph Database Loader", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "cfffec82b44c668d498e6b07bc1eac4a960f2a480fe232d96083d0886cb805ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bfdba9b5-bfcb-4802-9afd-28c7b7c604c5", "node_type": "1", "metadata": {"Header_1": " Conclusion"}, "hash": "e07ea37ef5a36797c9b3bfe704cca056cdcf412a43d516826b68fec0513b6125", "class_name": "RelatedNodeInfo"}}, "text": "Using the GraphQL Loader\n\nThe GraphQL loader is similarly easy to use.\n\n[ GraphQL ](https://graphql.org) is not a database query language, but an API\nquery language that is based on strict schema expressed in \"type definitions\".\nThere you express your entities, their attributes (fields) both for scalar\ndatatypes as well as object datatypes pointing to other entities.\n\nWhat is GraphQL from GraphQL.org, Screenshot by Author\n\nGraphQL itself is a tree based query language, that expresses a nested\nstructure of data that you want to fetch starting from a root query. The\nfields of every entity returned from that query can be selected and for object\nfields you can further select fields from the referred entity and so on,\nalmost ad-infinitum (API-Limits apply).\n\nThere are a number of GraphQL libraries, most notably the JavaScript reference\nimplementation, but also ` gql ` for python, and also integrations with\ndatabases like Hasura, Prisma or the [ Neo4j-GraphQL-Library\n](https://neo4j.com/product/graphql-library/) . Several larger projects now\nprovide GraphQL APIs including GitHub, Spotify, Twitter.\n\nThe demo is similar to our first one. We use a public GraphQL endpoint ( [\nhttps://countries.trevorblades.com/ ](https://countries.trevorblades.com/) ),\nthat provides a structure of continent\u2192country\u2192capital. ( [ Licensed under MIT\n](https://github.com/trevorblades/countries) )\n\nA subset of the type-definition is here.\n\n    \n    \n    type Query {\n        continent(code: ID!): Continent\n        continents(filter: ContinentFilterInput = {}): [Continent!]!\n        countries(filter: CountryFilterInput = {}): [Country!]!\n        country(code: ID!): Country\n        language(code: ID!): Language\n        languages(filter: LanguageFilterInput = {}): [Language!]!\n    }\n    \n    type Continent {\n        code: ID!\n        countries: [Country!]!\n        name: String!\n    }\n    \n    type Country {\n        awsRegion: String!\n        capital: String\n        code: ID!\n        continent: Continent!\n        currencies: [String!]!\n        currency: String\n        emoji: String!\n        emojiU: String!\n        languages: [Language!]!\n        name(lang: String): String!\n        native: String!\n        phone: String!\n        phones: [String!]!\n        states: [State!]!\n        subdivisions: [Subdivision!]!\n    }\n    ...\n\nIn our demo, we again define the ` ServiceContext ` with the `\nChatGPTLLMPredictor ` as before. Then we get the ` GraphQLReader ` loader and\npoint it to the URL of the endpoint. You can also provide additional HTTP-\nHeaders, e.g. for authentication.\n\n    \n    \n    GraphQLReader = download_loader('GraphQLReader')\n    reader = GraphQLReader(uri = \"https://countries.trevorblades.com/\", headers = {})\n    \n    \n    query = \"\"\"\n    query getContinents {\n      continents {\n        name\n        countries {\n          name\n          capital\n        }\n      }\n    }\n    \"\"\"\n    documents = reader.load_data(query, variables = {})\n    print(len(documents))\n    print(documents)\n\nWe see that it finds 7 continents with countries and capitals, each of the\nroot results (continent) is turned into a document\n\n    \n    \n    7\n    [Document(text='countries:\\n- capital: Luanda\\n  name: Angola\\n- capital: Ouagadougou\\n  name: Burkina Faso\\n- capital: Bujumbura\\n  name: Burundi\\n- capital: Porto-Novo\\n  name: Benin\\n- capital: Gaborone\\n  name: Botswana\\n- capital: Kinshasa\\n  name: Democratic Republic of the Congo\\n- capital: Bangui\\n  name: Central African Republic\\n....',doc_id='b82fec36-5e82-4246-b7ab-f590bf6741ab', embedding=None, doc_hash='a4caa760423d6ca861b9332f386add3c449f1683168391ae10f7f73a691a2240', extra_info=None)]\n\nAgain we stress the LLM only a little bit by asking it in German, \"Which\ncapitals are in North America\".\n\n    \n    \n    index = GPTVectorStoreIndex.from_documents(documents, service_context=service_context)\n    queryEngine= index.as_query_engine()\n    \n    response = queryEngine.query(\"\"\"\n    Question: Welche Hauptst\u00e4dte liegen in Nordamerika?\n    Answer:\n    \"\"\")\n    \n    response.response\n\nI was surprised, as I had only expected a hand-full of countries and cities.\nBut we get 27 countries that are in North America. This shows how our\nperception is skewed by the western worldview.\n\n    \n    \n    Die Hauptst\u00e4dte, die in Nordamerika liegen, sind Ottawa, San Jos\\xE9, Havana, Willemstad, Roseau, Santo Domingo, St. George's, Nuuk, Guatemala City, Tegucigalpa, Port-au-Prince, Kingston, Basseterre, George Town, Castries, Marigot, Fort-de-France, Plymouth, Mexico City, Managua, Panama City, Saint-Pierre, San Juan, San Salvador, Philipsburg, Cockburn Town, Port of Spain, Washington D.C., Kingstown und Road Town.\n\nWe could also flip the GraphQL query around and then get 250 countries with\ntheir respective capitals and continents.\n\n    \n    \n    query = \"\"\"\n    query getCountries {\n      countries {\n        name\n        capital\n        continent {\n            name\n        }\n      }\n    }\n    \"\"\"\n    documents = reader.load_data(query, variables = {})\n    print(len(documents))\n    print(documents)\n\nBoth document lists should work equally well, but let\u2019s see.\n\nThis time the answer from the LLM was much more limited. I\u2019m not sure if that\nwas because the index fed the LLM fewer documents to pick from.\n\n    \n    \n    index = GPTVectorStoreIndex.from_documents(documents, service_context=service_context)\n    queryEngine= index.as_query_engine()\n    \n    response = queryEngine.query(\"\"\"\n    Question: Which capitals are in North America?\n    Answer:\n    \"\"\")\n    \n    response.response\n    \n    \n    Washington D.C. and Mexico City are in North America.", "mimetype": "text/plain", "start_char_idx": 17604, "end_char_idx": 23224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfdba9b5-bfcb-4802-9afd-28c7b7c604c5": {"__data__": {"id_": "bfdba9b5-bfcb-4802-9afd-28c7b7c604c5", "embedding": null, "metadata": {"Header_1": " Conclusion", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba", "node_type": "4", "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "5b80622fb46fa8f20489b384fdf1c5af28c461beca096f5e7574d8e65c2346a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7e810623-1c95-44c8-b4ec-676ddd02c17d", "node_type": "1", "metadata": {"Header_1": " Using the GraphQL Loader", "filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}, "hash": "e3e946fcd8ac265a28364dae19d4d9388c9f4ac1ed2707b6b758b82ca844c4d7", "class_name": "RelatedNodeInfo"}}, "text": "Conclusion\n\nIt was really smooth to add new data loaders to LlamaHub, thanks a lot to [\nJerry Liu ](https://medium.com/u/e76da1c45ef7?source=post_page-----\nbcaecec262d7--------------------------------) for making it so easy. Please\nlet me know what you\u2019re doing with these loaders and if you have any feedback.\n\nIf I find time in the next weeks I also want to look into the `\nKnowledgeGraphIndex ` and see if my graph database loader can nicely populate\nthat one.", "mimetype": "text/plain", "start_char_idx": 23229, "end_char_idx": 23692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"11347994-52e2-4ffc-8c26-aeebc52dd3aa": {"doc_hash": "59ab2832503e9df577160c9441c7356e0ed64ff5e456614cb075f16be2289e71", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}, "75cc4a8f-ae2d-411a-a4ed-d8b0231d51f6": {"doc_hash": "fde456a4bb7950118989c69a9fb14aa24d7deac4ef42afb58b035979f72714f1", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}, "873b017e-03ca-471e-a8f2-49b497a4207d": {"doc_hash": "2ffa62269c8abe3d24e145691f6c0f7cdd4b82ca0de5321dd89930531c868743", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}, "a3694fcb-dbc2-4cc4-b288-344ad76d06f6": {"doc_hash": "7d3adcb5f483716a369bab2636c3c61235f4a56dc8c6d8764f63523e0e52b5d2", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}, "2f59c05e-d02a-479c-aef3-d64339c9ef4a": {"doc_hash": "60414b1ce0bb50714ed8d2d7f080a52c4753853acb37733db0a0e3048c720fef", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}, "d41c5712-5fbd-48df-ae10-b06b883b63eb": {"doc_hash": "c36b71e0626380e6c19fd795a889ec0fc8ef1e0d44a783f4268b6a4562b380ee", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}, "d3e140c9-2856-4d60-81e4-a1c6d430ebab": {"doc_hash": "cfffec82b44c668d498e6b07bc1eac4a960f2a480fe232d96083d0886cb805ac", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}, "7e810623-1c95-44c8-b4ec-676ddd02c17d": {"doc_hash": "e3e946fcd8ac265a28364dae19d4d9388c9f4ac1ed2707b6b758b82ca844c4d7", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}, "bfdba9b5-bfcb-4802-9afd-28c7b7c604c5": {"doc_hash": "6410de91de215c28e20f2f2477bc84a0c557364ee9711ec0885783c4959ee295", "ref_doc_id": "4b148bd5-dc70-4dfb-9299-70e9b6690fba"}}, "docstore/ref_doc_info": {"4b148bd5-dc70-4dfb-9299-70e9b6690fba": {"node_ids": ["11347994-52e2-4ffc-8c26-aeebc52dd3aa", "75cc4a8f-ae2d-411a-a4ed-d8b0231d51f6", "873b017e-03ca-471e-a8f2-49b497a4207d", "a3694fcb-dbc2-4cc4-b288-344ad76d06f6", "2f59c05e-d02a-479c-aef3-d64339c9ef4a", "d41c5712-5fbd-48df-ae10-b06b883b63eb", "d3e140c9-2856-4d60-81e4-a1c6d430ebab", "7e810623-1c95-44c8-b4ec-676ddd02c17d", "bfdba9b5-bfcb-4802-9afd-28c7b7c604c5"], "metadata": {"filename": "enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7.md", "extension": ".md", "title": "Enriching LlamaIndex Models with GraphQL and Graph Databases", "date": "Jun 30, 2023", "url": "https://www.llamaindex.ai/blog/enriching-llamaindex-models-from-graphql-and-graph-databases-bcaecec262d7"}}}}