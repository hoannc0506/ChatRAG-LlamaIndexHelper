{"docstore/data": {"5038100a-42c5-457d-983f-6c2755d4290d": {"__data__": {"id_": "5038100a-42c5-457d-983f-6c2755d4290d", "embedding": null, "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3845450c-9f2d-4bba-b62e-b84696fee5df", "node_type": "1", "metadata": {"Header_2": " Limitations of a Graph-based UX"}, "hash": "62d33a1c954b4a88e1b1033952d58426e81c905f7b9c74064c5ac97dc1c371df", "class_name": "RelatedNodeInfo"}}, "text": "We\u2019re pleased to be introducing a brand-new beta feature of LlamaIndex:\nworkflows, a mechanism for orchestrating actions in the increasingly-complex\nAI application we see our users building.\n\nWhat started as a trend with the advent of LLMs is now a de-facto standard: AI\napplications are made of multiple tasks implemented by different components.\nOpen source frameworks in the market strive to make the life of AI engineers\neasier by providing easy-to-use abstractions for foundational components like\ndata loaders, LLMs, vector databases, and rerankers, all the way up to\nexternal services. Meanwhile, all of those frameworks are also on a quest to\nfind what\u2019s the best abstraction to orchestrate such components, researching\nwhat\u2019s most intuitive and efficient for an AI developer in order to implement\nthe logic that keeps together a compound AI system.\n\nTwo of those potential orchestration patterns are chains and pipelines, both\nof which are implementations of the same Directed Acyclic Graph (DAG)\nabstraction. We took a stab at this with our [ Query Pipelines\n](https://www.llamaindex.ai/blog/introducing-query-pipelines-025dc2bb0537)\nrelease at the beginning of the year - it was a declarative API that let you\norchestrate simple-to-advanced query workflows over your data for different\nuse cases, like QA, structured extraction, and agentic automation. But as we\ntried to build upon it and experimented with adding cycles to better support\nmore complex workflows, we noticed several issues, causing us to reflect on\nwhy a DAG may not be the right fit for an agentic landscape, and what\nalternatives we could introduce in the framework.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3845450c-9f2d-4bba-b62e-b84696fee5df": {"__data__": {"id_": "3845450c-9f2d-4bba-b62e-b84696fee5df", "embedding": null, "metadata": {"Header_2": " Limitations of a Graph-based UX", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5038100a-42c5-457d-983f-6c2755d4290d", "node_type": "1", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "c78188299901a6773fc67b512fa2de0260278e94d26d54b0264006660d868912", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07081453-613e-420e-99ba-f2bbbbf02d37", "node_type": "1", "metadata": {"Header_2": " From Graphs to EDA: go event-driven"}, "hash": "d4f3704a306a6d2b3b507293bb3298115d472324cd8c88973bc31f2f15100f73", "class_name": "RelatedNodeInfo"}}, "text": "Limitations of a Graph-based UX\n\nA fundamental aspect of DAGs is the \u201cA\u201d in DAGs: they are acyclic, meaning\nthere are no loops. But in a world that\u2019s more and more agentic, the inability\nto perform loops in an AI application\u2019s logic is simply unacceptable. For\nexample, if one component provides bad results, an AI developer should have a\nway to tell the system to self-correct and try again.\n\nEven without adding cycles and loops to a DAG, the query pipeline suffered\nfrom a few noticeable issues:\n\n  * hard to debug when things go wrong \n  * they obscure how components and modules are being executed \n  * our pipeline orchestrator became increasingly extremely complex and had to handle a ton of different edge cases \n  * they were hard to read for complex pipelines \n\nOnce we added cycles to query pipelines, these developer UX issues around\ngraphs were amplified. We experienced first-hand developer pain in areas like:\n\n  * A lot of core orchestration logic like ` if-else ` statements and ` while ` loops get baked into the edges of the graph. Defining these edges becomes cumbersome and verbose. \n  * It became hard to handle edge cases around optional and default values. It was hard for us as a framework to figure out whether a parameter would get passed from upstream nodes. \n  * Defining graphs with cycles didn\u2019t always feel as natural to developers building agents. An agent encapsulates a general LLM-powered entity that can take in observations and generate responses. Here the graph UX enforced that \u201cagent\u201d node had the incoming edges and outgoing edges explicitly defined, forcing users to define verbose communication patterns with other nodes. \n\nWe asked: are graphs really the only abstraction we can use to orchestrate\ncomponents in a compound AI system?", "mimetype": "text/plain", "start_char_idx": 1652, "end_char_idx": 3430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07081453-613e-420e-99ba-f2bbbbf02d37": {"__data__": {"id_": "07081453-613e-420e-99ba-f2bbbbf02d37", "embedding": null, "metadata": {"Header_2": " From Graphs to EDA: go event-driven", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3845450c-9f2d-4bba-b62e-b84696fee5df", "node_type": "1", "metadata": {"Header_2": " Limitations of a Graph-based UX", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "58697125d853e6d9f415b4c5f347e8e80e6914623f98fe590d0f969c2e288013", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9c95a93-c012-40ee-aa95-20f3996cf931", "node_type": "1", "metadata": {"Header_2": " A workflow primer"}, "hash": "2c406712d7f0fa9b423efd7ed5071760738e8d2d87497ac89d16e2b1b5a7800e", "class_name": "RelatedNodeInfo"}}, "text": "From Graphs to EDA: go event-driven\n\nA compound AI system can be implemented with a LlamaIndex _workflow_ . The\nworkflow dispatches events back and forth through a collection of Python\nfunctions called _steps_ . Each step can be seen as one component of your\nsystem: one to process a query, one to talk with an LLM, one to load data from\na vector database and so on. Every step receives one or more events to process\nand can optionally send back events that will be relayed to other components\nif needed.\n\nMoving to an event-driven architecture causes a fundamental shift in design.\nIn many graph implementations the graph traversal algorithm is responsible for\ndetermining what component should run next and what data should be passed. In\nan event-driven architecture, the component subscribes to a certain types of\nevents and it\u2019s ultimately responsible for deciding what to do based on the\ndata it received.\n\nIn an event-driven system, concepts like optionality of inputs and default\nvalues are sorted out at the component level, dramatically simplifying the\norchestration code.", "mimetype": "text/plain", "start_char_idx": 3436, "end_char_idx": 4517, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9c95a93-c012-40ee-aa95-20f3996cf931": {"__data__": {"id_": "d9c95a93-c012-40ee-aa95-20f3996cf931", "embedding": null, "metadata": {"Header_2": " A workflow primer", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07081453-613e-420e-99ba-f2bbbbf02d37", "node_type": "1", "metadata": {"Header_2": " From Graphs to EDA: go event-driven", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "81798081d37474ea7d255b1e45bc39773e545ab8a0f59428231816822cc2a4ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70322b63-f003-4f15-a4e5-c9ca58615e29", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can loop"}, "hash": "3401d93bfea19aa8286a8e9026da6a2c33be61e6c8b3407e9ca8261a419201da", "class_name": "RelatedNodeInfo"}}, "text": "A workflow primer\n\nTo help clarify this idea, let\u2019s look at an example. A minimal LlamaIndex\nworkflow looks like this:\n\n    \n    \n    from llama_index.core.workflow import (\n        StartEvent,\n        StopEvent,\n        Workflow,\n        step,\n    )\n    \n    from llama_index.llms.openai import OpenAI\n    \n    class OpenAIGenerator(Workflow):\n        @step()\n        async def generate(self, ev: StartEvent) -> StopEvent:\n            query = ev.get(\"query\")\n            llm = OpenAI()\n            response = await llm.acomplete(query)\n            return StopEvent(result=str(response))\n    \n    w = OpenAIGenerator(timeout=10, verbose=False)\n    result = await w.run(query=\"What's LlamaIndex?\")\n    print(result)\n\nThe ` generate ` function is marked as a workflow step using the ` @step `\ndecorator and it declares which events it wants to receive and which events it\nwill send back using the method signature with proper typing annotations. In\norder to run a workflow, we create an instance of the ` OpenAIGenerator `\nclass passing some configuration parameters like the desired timeout and we\nthen call the ` run ` method. Any keyword argument passed to ` run ` will be\npacked into a special event of type ` StartEvent ` that will be relayed to the\nsteps that requested it (in this case, only the ` generate ` step). The `\ngenerate ` step returns a special event of type ` StopEvent ` that will signal\nthe workflow to gracefully halt its execution. A ` StopEvent ` carries any\ndata that we want to return to the caller as the workflow result, in this case\nthe LLM response.", "mimetype": "text/plain", "start_char_idx": 4523, "end_char_idx": 6100, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70322b63-f003-4f15-a4e5-c9ca58615e29": {"__data__": {"id_": "70322b63-f003-4f15-a4e5-c9ca58615e29", "embedding": null, "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can loop", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9c95a93-c012-40ee-aa95-20f3996cf931", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "d748c97a47b708e8ebcb7cacc2867d81a1b571f64ad370aa73842d270650b0fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5c6de3d6-a5ac-4a6e-afbb-226f745e4a74", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows keep state"}, "hash": "21bfd012d5c958fe346dc69da88cfcd5e87e58bbbb4f2998e1e27f5a2d4dbb32", "class_name": "RelatedNodeInfo"}}, "text": "Workflows can loop\n\nIn event-driven architectures, loops have to do with communication rather than\ntopology. Any step can decide to call another step multiple times by crafting\nand sending the proper event. Let\u2019s see a self-correction loop for example\n(check the [ notebook\n](https://docs.llamaindex.ai/en/latest/examples/workflow/reflection/) for the\nfull code):\n\n    \n    \n    class ExtractionDone(Event):\n        output: str\n        passage: str\n    \n    \n    class ValidationErrorEvent(Event):\n        error: str\n        wrong_output: str\n        passage: str\n        \n        \n    class ReflectionWorkflow(Workflow):\n        @step()\n        async def extract(\n            self, ev: StartEvent | ValidationErrorEvent\n        ) -> StopEvent | ExtractionDone:\n            if isinstance(ev, StartEvent):\n                passage = ev.get(\"passage\")\n                if not passage:\n                    return StopEvent(result=\"Please provide some text in input\")\n                reflection_prompt = \"\"\n            elif isinstance(ev, ValidationErrorEvent):\n                passage = ev.passage\n                reflection_prompt = REFLECTION_PROMPT.format(\n                    wrong_answer=ev.wrong_output, error=ev.error\n                )\n    \n            llm = Ollama(model=\"llama3\", request_timeout=30)\n            prompt = EXTRACTION_PROMPT.format(\n                passage=passage, schema=CarCollection.schema_json()\n            )\n            if reflection_prompt:\n                prompt += reflection_prompt\n    \n            output = await llm.acomplete(prompt)\n    \n            return ExtractionDone(output=str(output), passage=passage)\n    \n        @step()\n        async def validate(\n            self, ev: ExtractionDone\n        ) -> StopEvent | ValidationErrorEvent:\n            try:\n                json.loads(ev.output)\n            except Exception as e:\n                print(\"Validation failed, retrying...\")\n                return ValidationErrorEvent(\n                    error=str(e), wrong_output=ev.output, passage=ev.passage\n                )\n    \n            return StopEvent(result=ev.output)\n    \n    w = ReflectionWorkflow(timeout=60, verbose=True)\n    result = await w.run(\n        passage=\"There are two cars available: a Fiat Panda with 45Hp and a Honda Civic with 330Hp.\"\n    )\n    print(result)\n\nIn this example, the ` validate ` step receives the result of the tentative\nschema extraction as an event and it can decide to try again by returning a `\nValidationErrorEvent ` that will be eventually delivered to the ` extract `\nstep which will perform another attempt. Note that in this example the\nworkflow might time out if this extract/validate loop keeps providing poor\nresults for too long, but another strategy might be giving up after a precise\nnumber of attempts, just to give an example.", "mimetype": "text/plain", "start_char_idx": 6107, "end_char_idx": 8927, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c6de3d6-a5ac-4a6e-afbb-226f745e4a74": {"__data__": {"id_": "5c6de3d6-a5ac-4a6e-afbb-226f745e4a74", "embedding": null, "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows keep state", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "70322b63-f003-4f15-a4e5-c9ca58615e29", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can loop", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "048dfc0fe641ff6fdcd91abcf5683ace172237a37516db8df02601b8eedf6af4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c4c8eaf-d76d-473a-a9b2-cb1b0a11fb78", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can be customized"}, "hash": "2bdc71ccefd135ab241305b0f8e817e2e6ce6291db1f86a2272eb625de3005ef", "class_name": "RelatedNodeInfo"}}, "text": "Workflows keep state\n\nWorkflows keep a global state during the execution, and this state can be\nshared and propagated to its steps upon request. This shared state is\nimplemented as a ` Context ` object and can be used by steps to store data in\nbetween iterations but also as an alternative form of communication among\ndifferent steps. Let\u2019s see an excerpt from a more complex RAG example as an\nexample showing how to use the global context (check [ notebook\n](https://docs.llamaindex.ai/en/latest/examples/workflow/rag/) for full code):\n\n    \n    \n    class RAGWorkflow(Workflow):\n        @step(pass_context=True)\n        async def ingest(self, ctx: Context, ev: StartEvent) -> Optional[StopEvent]:\n            dataset_name = ev.get(\"dataset\")\n            _, documents = download_llama_dataset(dsname, \"./data\")\n            ctx.data[\"INDEX\"] = VectorStoreIndex.from_documents(documents=documents)\n            return StopEvent(result=f\"Indexed {len(documents)} documents.\")\n            \n        ...\n\nIn this case the ` ingest ` step creates an index, and it wants to make it\navailable to any other step that might needed it later during workflow\nexecution. The idiomatic way of doing that in a LlamaIndex workflow is to\ndeclare the step requires an instance of the global context ( `\n@step(pass_context=True) ` does the trick) and store the index in the context\nitself with a predefined key that other steps might access later.", "mimetype": "text/plain", "start_char_idx": 8934, "end_char_idx": 10360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c4c8eaf-d76d-473a-a9b2-cb1b0a11fb78": {"__data__": {"id_": "6c4c8eaf-d76d-473a-a9b2-cb1b0a11fb78", "embedding": null, "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can be customized", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c6de3d6-a5ac-4a6e-afbb-226f745e4a74", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows keep state", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "10d68b30941a958007dee58d8fe74e2b7687ae2078e1f89dcadd24cc62d3df81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11f1075e-2b47-4656-a76c-c14cf7b86d36", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can be debugged"}, "hash": "e831d67451c24d1c8844415179f28ebb243f3e891a3ae56a2e50622301c9971b", "class_name": "RelatedNodeInfo"}}, "text": "Workflows can be customized\n\nAlongside Workflows, we\u2019ll be releasing a set of predefined workflows so that\nthe most common use cases can be implemented with a single line of code. Using\nthese predefined flows, users still might want to just _slightly_ change a\npredefined workflow to introduce some custom behavior without having to\nrewrite a whole workflow from scratch. Let\u2019s say you want to customize a RAG\nworkflow and use a custom re-ranking step, all you would need to do is\nsubclass a hypothetical built-in ` RAGWorkflow ` class and override the `\nrerank ` step like this:\n\n    \n    \n    class MyWorkflow(RAGWorkflow):\n        @step(pass_context=True)\n        def rerank(\n            self, ctx: Context, ev: Union[RetrieverEvent, StartEvent]\n        ) -> Optional[QueryResult]:\n            # my custom reranking logic here\n            \n     \n    w = MyWorkflow(timeout=60, verbose=True)\n    result = await w.run(query=\"Who is Paul Graham?\")", "mimetype": "text/plain", "start_char_idx": 10367, "end_char_idx": 11314, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11f1075e-2b47-4656-a76c-c14cf7b86d36": {"__data__": {"id_": "11f1075e-2b47-4656-a76c-c14cf7b86d36", "embedding": null, "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can be debugged", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c4c8eaf-d76d-473a-a9b2-cb1b0a11fb78", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can be customized", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "38386f3c98369369395de8f080cc92f5fe082fa9328431bb1cd6897dee76d881", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "735dbac4-81ca-4879-a772-b9b00da8d192", "node_type": "1", "metadata": {"Header_2": " Why you should use workflows today"}, "hash": "9b883f9efef09443efe5fa2158fd533fe482abe7161888b1cd5cca3ccd7d8f0f", "class_name": "RelatedNodeInfo"}}, "text": "Workflows can be debugged\n\nThe complexity of your workflows will grow with the complexity of your\napplication logic, and sometimes it can be hard to understand how events will\nflow during execution by just looking at the Python code. To ease the\nunderstanding of complex workflows and to support the debugging of workflow\nexecutions, LlamaIndex provides two functions:\n\n  * ` draw_all_possible_flows ` produces a picture showing all the steps in a workflow and how events will possibly flow \n  * ` draw_most_recent_execution ` produces a similar picture, showing only the events that were actually sent during the last workflow execution \n\nOn top of that, workflows can be executed manually, by calling ` run_step() `\nmultiple times until all the steps have completed. After each ` run_step `\ncall, the workflow can be inspected, examining any intermediate results or\ndebug logs.", "mimetype": "text/plain", "start_char_idx": 11321, "end_char_idx": 12200, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "735dbac4-81ca-4879-a772-b9b00da8d192": {"__data__": {"id_": "735dbac4-81ca-4879-a772-b9b00da8d192", "embedding": null, "metadata": {"Header_2": " Why you should use workflows today", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11f1075e-2b47-4656-a76c-c14cf7b86d36", "node_type": "1", "metadata": {"Header_2": " A workflow primer", "Header_3": " Workflows can be debugged", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "63ef3842610beb0a5965bef5bc82ab8720aa815f183b851e5ccc78f773551d6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc213e4d-456c-4145-90d5-71d216d5769d", "node_type": "1", "metadata": {"Header_2": " Resources"}, "hash": "ee68d088416e2f2e345ce6b0acf9208bf747bc0786741c394cbc8ca638635e70", "class_name": "RelatedNodeInfo"}}, "text": "Why you should use workflows today\n\nDespite being at an early stage of development, LlamaIndex workflows already\nrepresent a step forward compared to query pipelines, extending their\nfunctionalities and adding more flexibility. On top of that, workflows come\nwith a set of features that you would normally expect from a much more mature\nsoftware:\n\n  * Fully async with streaming support \n  * Instrumented by default, providing one-click observability with the supported integrations \n  * Step-by-step execution for easier debugging \n  * Validation and visualization of the event-driven dependencies \n  * Events are implemented as pydantic models to ease customization and further developments of new features", "mimetype": "text/plain", "start_char_idx": 12206, "end_char_idx": 12914, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc213e4d-456c-4145-90d5-71d216d5769d": {"__data__": {"id_": "fc213e4d-456c-4145-90d5-71d216d5769d", "embedding": null, "metadata": {"Header_2": " Resources", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e", "node_type": "4", "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "4d78708f70d29e623ec4837a43bb5745585c866e225c4616a83578db1a599f01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "735dbac4-81ca-4879-a772-b9b00da8d192", "node_type": "1", "metadata": {"Header_2": " Why you should use workflows today", "filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}, "hash": "82a06b79dbb79b49ecc12319de9cf1826382f435c7b77670cc3062bfa143f7ff", "class_name": "RelatedNodeInfo"}}, "text": "Resources\n\nCheck out our [ workflow documentation\n](https://docs.llamaindex.ai/en/latest/module_guides/workflow/) and our [\nexamples ](https://github.com/run-\nllama/llama_index/tree/main/docs/docs/examples/workflow) including:\n\n  * [ RAG ](https://docs.llamaindex.ai/en/latest/examples/workflow/rag/)\n  * [ Reflection ](https://docs.llamaindex.ai/en/latest/examples/workflow/reflection/)\n  * [ Function calling ](https://docs.llamaindex.ai/en/latest/examples/workflow/function_calling_agent/)\n  * [ ReAct agent ](https://docs.llamaindex.ai/en/latest/examples/workflow/react_agent/)", "mimetype": "text/plain", "start_char_idx": 12921, "end_char_idx": 13502, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"5038100a-42c5-457d-983f-6c2755d4290d": {"doc_hash": "c78188299901a6773fc67b512fa2de0260278e94d26d54b0264006660d868912", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "3845450c-9f2d-4bba-b62e-b84696fee5df": {"doc_hash": "58697125d853e6d9f415b4c5f347e8e80e6914623f98fe590d0f969c2e288013", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "07081453-613e-420e-99ba-f2bbbbf02d37": {"doc_hash": "81798081d37474ea7d255b1e45bc39773e545ab8a0f59428231816822cc2a4ad", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "d9c95a93-c012-40ee-aa95-20f3996cf931": {"doc_hash": "d748c97a47b708e8ebcb7cacc2867d81a1b571f64ad370aa73842d270650b0fd", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "70322b63-f003-4f15-a4e5-c9ca58615e29": {"doc_hash": "048dfc0fe641ff6fdcd91abcf5683ace172237a37516db8df02601b8eedf6af4", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "5c6de3d6-a5ac-4a6e-afbb-226f745e4a74": {"doc_hash": "10d68b30941a958007dee58d8fe74e2b7687ae2078e1f89dcadd24cc62d3df81", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "6c4c8eaf-d76d-473a-a9b2-cb1b0a11fb78": {"doc_hash": "38386f3c98369369395de8f080cc92f5fe082fa9328431bb1cd6897dee76d881", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "11f1075e-2b47-4656-a76c-c14cf7b86d36": {"doc_hash": "63ef3842610beb0a5965bef5bc82ab8720aa815f183b851e5ccc78f773551d6c", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "735dbac4-81ca-4879-a772-b9b00da8d192": {"doc_hash": "82a06b79dbb79b49ecc12319de9cf1826382f435c7b77670cc3062bfa143f7ff", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}, "fc213e4d-456c-4145-90d5-71d216d5769d": {"doc_hash": "af6ae8d668418af927084d7d67e9ebff451ecace2d60b7346275e4f77e2985b6", "ref_doc_id": "d61fded6-afb2-4765-a6bc-cb0998d6ed7e"}}, "docstore/ref_doc_info": {"d61fded6-afb2-4765-a6bc-cb0998d6ed7e": {"node_ids": ["5038100a-42c5-457d-983f-6c2755d4290d", "3845450c-9f2d-4bba-b62e-b84696fee5df", "07081453-613e-420e-99ba-f2bbbbf02d37", "d9c95a93-c012-40ee-aa95-20f3996cf931", "70322b63-f003-4f15-a4e5-c9ca58615e29", "5c6de3d6-a5ac-4a6e-afbb-226f745e4a74", "6c4c8eaf-d76d-473a-a9b2-cb1b0a11fb78", "11f1075e-2b47-4656-a76c-c14cf7b86d36", "735dbac4-81ca-4879-a772-b9b00da8d192", "fc213e4d-456c-4145-90d5-71d216d5769d"], "metadata": {"filename": "introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex.md", "extension": ".md", "title": "Introducing workflows beta: a new way to create complex AI applications with LlamaIndex", "date": "Aug 1, 2024", "url": "https://www.llamaindex.ai/blog/introducing-workflows-beta-a-new-way-to-create-complex-ai-applications-with-llamaindex"}}}}