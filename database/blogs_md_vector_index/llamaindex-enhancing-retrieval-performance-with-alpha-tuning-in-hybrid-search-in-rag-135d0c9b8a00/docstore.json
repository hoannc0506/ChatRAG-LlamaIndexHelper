{"docstore/data": {"b508454b-d0af-4c7a-8d52-04583f097560": {"__data__": {"id_": "b508454b-d0af-4c7a-8d52-04583f097560", "embedding": null, "metadata": {"Header_1": " Introduction", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5d195fc9-7826-4d10-9483-dff9c782b5d2", "node_type": "1", "metadata": {"Header_1": " Different User Query Types:"}, "hash": "142743bb7f3f4e88101bd113e83026051e72ada58538d3718ccaa8c372da76de", "class_name": "RelatedNodeInfo"}}, "text": "Introduction\n\nRetrieving the appropriate chunks, nodes, or context is a critical aspect of\nbuilding an efficient Retrieval-Augmented Generation (RAG) application.\nHowever, a vector or embedding-based search may not be effective for all types\nof user queries.\n\nTo address this, [ Hybrid search ](https://weaviate.io/blog/hybrid-search-\nexplained) combines both keyword-based methods (BM25) and vector (embedding)\nsearch techniques. Hybrid search has a specific parameter, ` Alpha ` to\nbalance the weightage between keyword (BM25) and vector search in retrieving\nthe right context for your RAG application. (alpha=0.0 - keyword search (BM25)\nand alpha=1.0 - vector search)\n\nBut here\u2019s where it gets interesting: fine-tuning Alpha isn\u2019t just a task;\nit\u2019s an art form. Achieving the ideal balance is crucial for unlocking the\nfull potential of hybrid search. This involves adjusting different Alpha\nvalues for various types of user queries in your RAG system.\n\nIn this blog post, we will look into tuning Alpha within the Weaviate vector\ndatabase using the ` [ **Retrieval Evaluation**\n](https://docs.llamaindex.ai/en/stable/examples/evaluation/retrieval/retriever_eval.html)\n` module of LlamaIndex with and without rerankers with the help of Hit Rate\nand MRR metrics.\n\nBefore diving into the implementation, let\u2019s first understand the different\nquery types and metrics we will be using in this article.", "mimetype": "text/plain", "start_char_idx": 3, "end_char_idx": 1402, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5d195fc9-7826-4d10-9483-dff9c782b5d2": {"__data__": {"id_": "5d195fc9-7826-4d10-9483-dff9c782b5d2", "embedding": null, "metadata": {"Header_1": " Different User Query Types:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b508454b-d0af-4c7a-8d52-04583f097560", "node_type": "1", "metadata": {"Header_1": " Introduction", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "3a286cd1f3ec4cc4050b88b4d7eb8831e1d1f3c05b24af6bf9b02d011732fb43", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a506c987-618e-471e-a1b4-0bc8ca2013c9", "node_type": "1", "metadata": {"Header_1": " Retrieval Evaluation Metrics:"}, "hash": "cbbcf861795712752facd58fab866d7925c5f8af5211f5247cde110d5bf47904", "class_name": "RelatedNodeInfo"}}, "text": "Different User Query Types:\n\nUser queries in an RAG application vary based on individual intent. For these\ndiverse query types, it\u2019s essential to fine-tune the ` **Alpha** ` parameter.\nThis process involves routing each user query to a specific ` **Alpha** `\nvalue for effective retrieval and response synthesis. [ Microsoft\n](https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/azure-ai-\nsearch-outperforming-vector-search-with-hybrid/ba-p/3929167) has identified\nvarious user query categories, and we have selected a few for tuning our\nhybrid search. Below are the different user query types we considered:\n\n  1. **Web Search Queries:** Brief queries similar to those typically inputted into search engines. \n  2. **Concept Seeking Queries:** Abstract questions that necessitate detailed, multi-sentence answers. \n  3. **Fact Seeking Queries:** Queries that have a single, definitive answer. \n  4. **Keyword Queries:** Concise queries composed solely of crucial identifier words. \n  5. **Queries With Misspellings:** Queries containing typos, transpositions, and common misspellings. \n  6. **Exact Sub-string Searches:** Queries that exactly match sub-strings from the original context. \n\nLet\u2019s look at sample examples in each of these different user query types:\n\n  1. **Web Search Queries**\n\n> ` _Transfer capabilities of LLaMA language model to non-English languages_ `\n\n**2\\. Concept Seeking Queries**\n\n> ` _What is the dual-encoder architecture used in recent works on dense\n> retrievers?_ `\n\n**3\\. Fact Seeking Queries**\n\n> ` _What is the total number of propositions the English Wikipedia dump is\n> segmented into in FACTOID WIKI?_ `\n\n**4\\. Keyword Queries**\n\n> ` _GTR retriever recall rate_ `\n\n**5\\. Queries With Misspellings**\n\n> ` _What is the advntage of prposition retrieval over sentnce or passage\n> retrieval?_ `\n\n**6\\. Exact Sub-string Searches**\n\n> ` _first kwords for the GTR retriever. Finer-grained_ `", "mimetype": "text/plain", "start_char_idx": 1407, "end_char_idx": 3342, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a506c987-618e-471e-a1b4-0bc8ca2013c9": {"__data__": {"id_": "a506c987-618e-471e-a1b4-0bc8ca2013c9", "embedding": null, "metadata": {"Header_1": " Retrieval Evaluation Metrics:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5d195fc9-7826-4d10-9483-dff9c782b5d2", "node_type": "1", "metadata": {"Header_1": " Different User Query Types:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "36e96898301c5695daaf9104c41a71b17b200c5e841535d13b7a660101160e5a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a3428a2e-93bd-4900-98b8-26a78546185c", "node_type": "1", "metadata": {"Header_1": " Implementation"}, "hash": "ec0212a7935d872014c503ecfad06639b2197be182cc343c8ab350bbe7e6bbcd", "class_name": "RelatedNodeInfo"}}, "text": "Retrieval Evaluation Metrics:\n\nWe will utilize Hit Rate and MRR metrics for retrieval evaluation. Let\u2019s get\ninto understanding these metrics.\n\n**Hit Rate:**\n\nHit Rate measures the proportion of queries for which the correct chunk/\ncontext appears within the top-k results chunks/ contexts. Put simply, it\nevaluates how frequently our system correctly identifies the chunk within its\ntop-k chunks.\n\n**Mean Reciprocal Rank (MRR):**\n\nMRR assesses a system\u2019s accuracy by taking into account the position of the\nhighest-ranking relevant chunk/ context for each query. It calculates the\naverage of the inverse of these positions across all queries. For instance, if\nthe first relevant chunk/ context is at the top of the list, its reciprocal\nrank is 1. If it\u2019s the second item, the reciprocal rank becomes 1/2, and this\npattern continues accordingly.\n\nThe remainder of this blog post is divided into two main sections:\n\n  1. Implementing ` **Alpha** ` Tuning in Hybrid Search for Various Query Types. \n  2. Analyzing the results of two different document datasets: \n\n  * **Indexing a Single Document:** The [ LLM Compiler Paper ](https://arxiv.org/pdf/2312.04511.pdf) . \n  * **Indexing Three Documents:** The [ LLM Compiler ](https://arxiv.org/pdf/2312.04511.pdf) , [ Llama Beyond English ](https://arxiv.org/abs/2401.01055) , and [ Dense X Retrieval ](https://arxiv.org/abs/2312.06648) Papers. \n\nYou can also continue following along in the [ Google Colab Notebook\n](https://colab.research.google.com/drive/1aiXqofZp7hSXuUdv2UGt_QoJa_liJDZ6?usp=sharing)\nfrom this point forward.", "mimetype": "text/plain", "start_char_idx": 3347, "end_char_idx": 4920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3428a2e-93bd-4900-98b8-26a78546185c": {"__data__": {"id_": "a3428a2e-93bd-4900-98b8-26a78546185c", "embedding": null, "metadata": {"Header_1": " Implementation", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a506c987-618e-471e-a1b4-0bc8ca2013c9", "node_type": "1", "metadata": {"Header_1": " Retrieval Evaluation Metrics:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "95d6bef1729f88489af31424c8604ac085d5aa1810b1da5daacada396152d118", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5bddf043-d22a-4dcd-ae0a-8361797bbdd6", "node_type": "1", "metadata": {"Header_1": " Analyze the results:"}, "hash": "a14e0be3d554c63e52dc1296e4f8237aaed5ccac308f019098dc82253e6f08c2", "class_name": "RelatedNodeInfo"}}, "text": "Implementation\n\nWe will adopt a systematic approach to implement the experimental workflow,\nwhich involves the following steps:\n\n  1. Data Download. \n  2. Data Loading. \n  3. Weaviate Client Setup. \n  4. Index Creation and Node Insertion. \n  5. Define LLM (GPT-4) \n  6. Define CohereAI Reranker. \n  7. Generation of Synthetic Queries for Various Query Types. \n  8. Define CustomRetriever. \n  9. Functions for Retrieval Evaluation and Metrics Calculation. \n  10. Conducting Retrieval Evaluation for Different Query Types and Alpha Values. \n\nLet\u2019s begin by defining some essential functions for our implementation.\n\n  1. ` get_weaviate_client ` \\- sets up weaviate client. \n  2. ` load_documents ` \\- load the documents from the file path. \n  3. ` create_nodes ` \\- create nodes by chunking the documents using a text splitter. \n  4. ` connect_index ` \\- connect to weaviate index. \n  5. ` insert_nodes_index ` \\- insert nodes into the index. \n\n    \n    \n    def get_weaviate_client(api_key, url):\n      auth_config = weaviate.AuthApiKey(api_key=api_key)\n    \n      client = weaviate.Client(\n        url=url,\n        auth_client_secret=auth_config\n      )\n      return client\n    \n    def load_documents(file_path, num_pages=None):\n      if num_pages:\n        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()[:num_pages]\n      else:\n        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()\n      return documents\n    \n    def create_nodes(documents, chunk_size=512, chunk_overlap=0):\n      node_parser = SentenceSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)\n      nodes = node_parser.get_nodes_from_documents(documents)\n      return nodes\n    \n    def connect_index(weaviate_client):\n      vector_store = WeaviateVectorStore(weaviate_client=weaviate_client)\n      storage_context = StorageContext.from_defaults(vector_store=vector_store)\n      index = VectorStoreIndex([], storage_context=storage_context)\n      return index\n    \n    def insert_nodes_index(index, nodes):\n      index.insert_nodes(nodes)\n\n  1. **Download Data**\n\n    \n    \n    !wget --user-agent \"Mozilla\" \"https://arxiv.org/pdf/2312.04511.pdf\" -O \"llm_compiler.pdf\"\n    !wget --user-agent \"Mozilla\" \"https://arxiv.org/pdf/2401.01055.pdf\" -O \"llama_beyond_english.pdf\"\n    !wget --user-agent \"Mozilla\" \"https://arxiv.org/pdf/2312.06648.pdf\" -O \"dense_x_retrieval.pdf\"\n\n2\\. **Load Data**\n\n    \n    \n    # load documents, we will skip references and appendices from the papers.\n    documents1 = load_documents(\"llm_compiler.pdf\", 12)\n    documents2 = load_documents(\"dense_x_retrieval.pdf\", 9)\n    documents3 = load_documents(\"llama_beyond_english.pdf\", 7)\n    \n    # create nodes\n    nodes1 = create_nodes(documents1)\n    nodes2 = create_nodes(documents2)\n    nodes3 = create_nodes(documents3)\n\n3\\. **Setup Weaviate Client**\n\n    \n    \n    url = 'cluster URL'\n    api_key = 'your api key'\n    \n    client = get_weaviate_client(api_key, url)\n\n4\\. **Create an Index and Insert Nodes.**\n\n    \n    \n    index = connect_index(client)\n    \n    insert_nodes_index(index, nodes1)\n\n5\\. **Define LLM**\n\n    \n    \n    # Deing LLM for query generation\n    llm = OpenAI(model='gpt-4', temperature=0.1)\n\n6\\. **Create Synthetic Queries**\n\nWe will create queries as discussed earlier, check prompts for each of the\nquery types in the notebook, and code for each type of query. Showing code\nsnippet for reference.\n\n    \n    \n    queries = generate_question_context_pairs(\n        nodes, \n      llm=llm, \n      num_questions_per_chunk=2, \n      qa_generate_prompt_tmpl = qa_template\n    )\n\n7\\. **Define reranker**\n\n    \n    \n    reranker = CohereRerank(api_key=os.environ['COHERE_API_KEY'], top_n=4)\n\n8\\. **Define CustomRetriever**\n\nWe will define ` CustomRetriever ` class to perform retrieval operations with\nand without a reranker.\n\n    \n    \n    class CustomRetriever(BaseRetriever):\n        \"\"\"Custom retriever that performs hybrid search with and without reranker\"\"\"\n    \n        def __init__(\n            self,\n            vector_retriever: VectorIndexRetriever,\n            reranker: CohereRerank\n        ) -&gt; None:\n            \"\"\"Init params.\"\"\"\n    \n            self._vector_retriever = vector_retriever\n            self._reranker = reranker\n    \n        def _retrieve(self, query_bundle: QueryBundle) -&gt; List[NodeWithScore]:\n            \"\"\"Retrieve nodes given query.\"\"\"\n    \n            retrieved_nodes = self._vector_retriever.retrieve(query_bundle)\n    \n            if self._reranker != None:\n                retrieved_nodes = self._reranker.postprocess_nodes(retrieved_nodes, query_bundle)\n            else:\n                retrieved_nodes = retrieved_nodes[:4]\n    \n            return retrieved_nodes\n    \n        async def _aretrieve(self, query_bundle: QueryBundle) -&gt; List[NodeWithScore]:\n            \"\"\"Asynchronously retrieve nodes given query.\n    \n            Implemented by the user.\n    \n            \"\"\"\n            return self._retrieve(query_bundle)\n    \n        async def aretrieve(self, str_or_query_bundle: QueryType) -&gt; List[NodeWithScore]:\n            if isinstance(str_or_query_bundle, str):\n                str_or_query_bundle = QueryBundle(str_or_query_bundle)\n            return await self._aretrieve(str_or_query_bundle)\n\n9\\. **Define functions for retriever evaluation and metrics computation**\n\nWe will look into retriever performance for different ` alpha ` values with\nand without reranker.\n\n    \n    \n    # Alpha values and datasets to test\n    alpha_values = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n    \n    # Function to evaluate retriever and return results\n    async def evaluate_retriever(alpha, dataset, reranker=None):\n        retriever = VectorIndexRetriever(index,\n                                         vector_store_query_mode=\"hybrid\",\n                                         similarity_top_k=10,\n                                         alpha=alpha)\n        custom_retriever = CustomRetriever(retriever,\n                                           reranker)\n    \n        retriever_evaluator = RetrieverEvaluator.from_metric_names([\"mrr\", \"hit_rate\"], retriever=custom_retriever)\n        eval_results = await retriever_evaluator.aevaluate_dataset(dataset)\n        return eval_results\n    \n    # Function to calculate and store metrics\n    def calculate_metrics(eval_results):\n        metric_dicts = []\n        for eval_result in eval_results:\n            metric_dict = eval_result.metric_vals_dict\n            metric_dicts.append(metric_dict)\n    \n        full_df = pd.DataFrame(metric_dicts)\n    \n        hit_rate = full_df[\"hit_rate\"].mean()\n        mrr = full_df[\"mrr\"].mean()\n        return hit_rate, mrr\n\n**10\\. Retrieval Evaluation**\n\nHere we do retrieval evaluation on different query types (datasets) and alpha\nvalues to understand which alpha will be suitable for which query type. You\nneed to plug in the reranker accordingly to compute the retrieval evaluation\nwith and without the reranker.\n\n    \n    \n    # Asynchronous function to loop over datasets and alpha values and evaluate\n    async def main():\n        results_df = pd.DataFrame(columns=['Dataset', 'Alpha', 'Hit Rate', 'MRR'])\n    \n        for dataset in datasets_single_document.keys():\n            for alpha in alpha_values:\n                eval_results = await evaluate_retriever(alpha, datasets_single_document[dataset])\n                hit_rate, mrr = calculate_metrics(eval_results)\n                new_row = pd.DataFrame({'Dataset': [dataset], 'Alpha': [alpha], 'Hit Rate': [hit_rate], 'MRR': [mrr]})\n                results_df = pd.concat([results_df, new_row], ignore_index=True)\n    \n        # Determine the grid size for subplots\n        num_rows = len(datasets_single_document) // 2 + len(datasets_single_document) % 2\n        num_cols = 2\n    \n        # Plotting the results in a grid\n        fig, axes = plt.subplots(num_rows, num_cols, figsize=(12, num_rows * 4), squeeze=False)  # Ensure axes is always 2D\n    \n        for i, dataset in enumerate(datasets_single_document):\n            ax = axes[i // num_cols, i % num_cols]\n            dataset_df = results_df[results_df['Dataset'] == dataset]\n            ax.plot(dataset_df['Alpha'], dataset_df['Hit Rate'], marker='o', label='Hit Rate')\n            ax.plot(dataset_df['Alpha'], dataset_df['MRR'], marker='o', linestyle='--', label='MRR')\n            ax.set_xlabel('Alpha')\n            ax.set_ylabel('Metric Value')\n            ax.set_title(f'{dataset}')\n            ax.legend()\n            ax.grid(True)\n    \n        # If the number of datasets is odd, remove the last (empty) subplot\n        if len(datasets_single_document) % num_cols != 0:\n            fig.delaxes(axes[-1, -1])  # Remove the last subplot if not needed\n    \n        # Adjust layout to prevent overlap\n        plt.tight_layout()\n        plt.show()\n    \n    # Run the main function\n    asyncio.run(main())", "mimetype": "text/plain", "start_char_idx": 4925, "end_char_idx": 13800, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bddf043-d22a-4dcd-ae0a-8361797bbdd6": {"__data__": {"id_": "5bddf043-d22a-4dcd-ae0a-8361797bbdd6", "embedding": null, "metadata": {"Header_1": " Analyze the results:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a3428a2e-93bd-4900-98b8-26a78546185c", "node_type": "1", "metadata": {"Header_1": " Implementation", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "048617e8287200e2d9b0cc60e87075ea4ef52be2f8762e4c24213cd337686042", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "945410f4-7c17-46fc-b6d4-837a50d26875", "node_type": "1", "metadata": {"Header_1": " Analyze the results:", "Header_2": " **With Single Document:**"}, "hash": "84ada6e2afa473da78e9ab8fd0024b2f8d00be609cf222149e152a521e38aa47", "class_name": "RelatedNodeInfo"}}, "text": "Analyze the results:\n\nHaving completed the implementation phase, we now turn our attention to\nanalyzing the outcomes. We conducted two sets of experiments: one on a single\ndocument and another on multiple documents. These experiments varied in alpha\nvalues, types of user queries, and the inclusion or exclusion of a reranker.\nThe accompanying graphs display the results, focusing on the Hit Rate and MRR\n(Mean Reciprocal Rank) as retrieval evaluation metrics.\n\n> P  lease keep in mind that following observations are specific to the\n> datasets used in our study. We encourage you to conduct the experiment with\n> your own documents and draw your relevant observations and conclusions.", "mimetype": "text/plain", "start_char_idx": 13805, "end_char_idx": 14490, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "945410f4-7c17-46fc-b6d4-837a50d26875": {"__data__": {"id_": "945410f4-7c17-46fc-b6d4-837a50d26875", "embedding": null, "metadata": {"Header_1": " Analyze the results:", "Header_2": " **With Single Document:**", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5bddf043-d22a-4dcd-ae0a-8361797bbdd6", "node_type": "1", "metadata": {"Header_1": " Analyze the results:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "073bb056ac3f4c67216e21070632518463a6e0841a2d069852a9be3b5c6d866d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "49c68fb8-12f6-4e16-b7d7-6b0d06a3a69a", "node_type": "1", "metadata": {"Header_1": " Analyze the results:", "Header_2": " With Multiple Documents:"}, "hash": "f66b540112bc45cd6f729c303c7ef57b3684933322b9278f8061a63263098c4a", "class_name": "RelatedNodeInfo"}}, "text": "**With Single Document:**\n\n**Without Reranker:**\n\n**With Reranker:**", "mimetype": "text/plain", "start_char_idx": 14496, "end_char_idx": 14564, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49c68fb8-12f6-4e16-b7d7-6b0d06a3a69a": {"__data__": {"id_": "49c68fb8-12f6-4e16-b7d7-6b0d06a3a69a", "embedding": null, "metadata": {"Header_1": " Analyze the results:", "Header_2": " With Multiple Documents:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "945410f4-7c17-46fc-b6d4-837a50d26875", "node_type": "1", "metadata": {"Header_1": " Analyze the results:", "Header_2": " **With Single Document:**", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "60f1a9658ef22bdafa046f1f7173c6da25b09a5e62f460f71863c258d96955a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b3442b3-cf19-4529-b3aa-21c134556f32", "node_type": "1", "metadata": {"Header_1": " Observations:"}, "hash": "f2692f632b5a5c3bfa7f2d57a36916e384957f68df98a899f6b792c88a84ba27", "class_name": "RelatedNodeInfo"}}, "text": "With Multiple Documents:\n\n**Without Reranker:**\n\n**With Reranker:**", "mimetype": "text/plain", "start_char_idx": 14570, "end_char_idx": 14637, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b3442b3-cf19-4529-b3aa-21c134556f32": {"__data__": {"id_": "5b3442b3-cf19-4529-b3aa-21c134556f32", "embedding": null, "metadata": {"Header_1": " Observations:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49c68fb8-12f6-4e16-b7d7-6b0d06a3a69a", "node_type": "1", "metadata": {"Header_1": " Analyze the results:", "Header_2": " With Multiple Documents:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "dd73723da406ff7aec2af1df99bb88eb4ac88c39c8c2f6bd0f1a3c49623ef3f4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e674b60f-95fc-4ded-8605-9c154841af9f", "node_type": "1", "metadata": {"Header_1": " What\u2019s Next?"}, "hash": "d59c82dd9f31036e465f4b1139ba81c5bddb8ae3036bf91c9136fe4ef1b1acdc", "class_name": "RelatedNodeInfo"}}, "text": "Observations:\n\n  1. There is a boost in Hit Rate and MRR in single and multiple documents indexing with the help of a reranker. Time and again it proves using reranker is pretty useful in your RAG application. \n  2. Though most of the time hybrid search wins over keyword/ vector search, it should be carefully evaluated for different query types based on user queries in the RAG application. \n  3. The behavior is different when you index a single document and multiple documents, which suggests it\u2019s always better to tune alpha as you add documents into the index. \n  4. Let\u2019s look at a deeper analysis of different query types: \n\n  * **Web Search Queries:**\n\n\u2014 MRR is higher with hybrid search with alpha=0.2/0.6 based on with/ without\nrerankers irrespective of single/ multiple documents indexing.\n\n\u2014 The Hit rate is higher with alpha=1.0 for both single/ multiple documents\nindexing and with/ without rerankers.\n\n  * **Concept Seeking Queries:**\n\n\u2014 MRR and Hit Rate are higher with hybrid search (with different alpha values)\nin Multiple documents indexing.\n\n\u2014 MRR and Hit Rate are higher at Alpha=0.0 indicating keyword search works\nbetter in Single document indexing. Should be noted that MRR has different\nbehavior with and without reranking.\n\n  * **Fact Seeking Queries**\n\n\u2014 MRR and Hit Rate are higher with Hybrid search with/ without reranker in\nMultiple documents indexing.\n\n\u2014 MRR and Hit Rate are higher with hybrid search with reranker and keyword\nsearch (alpha=0.0) is better without reranker in single documents indexing.\n\n  * **Keyword Queries**\n\n\u2014 MRR and Hit Rate are higher with Hybrid search with/ without reranker in\nMultiple documents indexing.\n\n\u2014 MRR and Hit Rate are higher with hybrid search with reranker and keyword\nsearch is better without reranker in single documents indexing. (though MRR is\nslightly higher with alpha=0.2)\n\n  * **Queries With Misspellings**\n\n\u2014 MRR and Hit Rate are higher with Hybrid search with/ without reranker in\nsingle and multiple documents indexing. (Though in some cases hybrid search\nwith alpha=1.0 wins).\n\n\u2014 This also demonstrates that vector search performs better with misspelled\nqueries, as keyword searches lose effectiveness in such cases.\n\n  * **Exact Sub-string Searches**\n\n\u2014 MRR and Hit Rate are higher with Keyword search with/ without reranker in\nSingle documents indexing and without reranker in multiple documents indexing.\n\n\u2014 MRR and Hit Rate are higher with Hybrid search (alpha=0.4) with reranker in\nmultiple documents indexing.", "mimetype": "text/plain", "start_char_idx": 14642, "end_char_idx": 17144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e674b60f-95fc-4ded-8605-9c154841af9f": {"__data__": {"id_": "e674b60f-95fc-4ded-8605-9c154841af9f", "embedding": null, "metadata": {"Header_1": " What\u2019s Next?", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b3442b3-cf19-4529-b3aa-21c134556f32", "node_type": "1", "metadata": {"Header_1": " Observations:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "0e37581803d7040fb11cb4e01974f1a5bfa5b02db0eff62e410404fe69906c65", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "089da4e3-ff69-47ee-9c2d-12ec452a6060", "node_type": "1", "metadata": {"Header_1": " References:"}, "hash": "55cefa74f6b68733dedf5512c2ccdaffeac9706070eaac3c5acc605db9ad5ea5", "class_name": "RelatedNodeInfo"}}, "text": "What\u2019s Next?\n\nIn this blog post, we looked into the tuning of Alpha in a hybrid search\nsystem for a range of query types. It was interesting to see how the results\nvaried when indexing either a single document or multiple documents. Going\nforward, you might consider experimenting with documents from diverse domains,\nemploying different query lengths for various query types. Should you come\nacross any noteworthy observations, we encourage you to share them with us in\nthe comments. It would certainly be interesting to discuss these findings with\nthe wider community.", "mimetype": "text/plain", "start_char_idx": 17149, "end_char_idx": 17719, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "089da4e3-ff69-47ee-9c2d-12ec452a6060": {"__data__": {"id_": "089da4e3-ff69-47ee-9c2d-12ec452a6060", "embedding": null, "metadata": {"Header_1": " References:", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d22ba503-f88a-4035-8761-33a79a4352fb", "node_type": "4", "metadata": {"filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "cd09245b82f1009f2fcb3b7b6492460558920c9047bc0c854d3f6b5d6873230b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e674b60f-95fc-4ded-8605-9c154841af9f", "node_type": "1", "metadata": {"Header_1": " What\u2019s Next?", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}, "hash": "d0b415b15729d7c22eb62771398ef8ac73e86a61d4f717d5aeb2c592d09e8fde", "class_name": "RelatedNodeInfo"}}, "text": "References:\n\n  1. [ Hybrid Search Explained ](https://weaviate.io/blog/hybrid-search-explained)\n  2. [ Azure AI Search: Outperforming vector search with hybrid retrieval and ranking capabilities ](https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/azure-ai-search-outperforming-vector-search-with-hybrid/ba-p/3929167)", "mimetype": "text/plain", "start_char_idx": 17724, "end_char_idx": 18055, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"b508454b-d0af-4c7a-8d52-04583f097560": {"doc_hash": "3a286cd1f3ec4cc4050b88b4d7eb8831e1d1f3c05b24af6bf9b02d011732fb43", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "5d195fc9-7826-4d10-9483-dff9c782b5d2": {"doc_hash": "36e96898301c5695daaf9104c41a71b17b200c5e841535d13b7a660101160e5a", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "a506c987-618e-471e-a1b4-0bc8ca2013c9": {"doc_hash": "95d6bef1729f88489af31424c8604ac085d5aa1810b1da5daacada396152d118", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "a3428a2e-93bd-4900-98b8-26a78546185c": {"doc_hash": "048617e8287200e2d9b0cc60e87075ea4ef52be2f8762e4c24213cd337686042", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "5bddf043-d22a-4dcd-ae0a-8361797bbdd6": {"doc_hash": "073bb056ac3f4c67216e21070632518463a6e0841a2d069852a9be3b5c6d866d", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "945410f4-7c17-46fc-b6d4-837a50d26875": {"doc_hash": "60f1a9658ef22bdafa046f1f7173c6da25b09a5e62f460f71863c258d96955a8", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "49c68fb8-12f6-4e16-b7d7-6b0d06a3a69a": {"doc_hash": "dd73723da406ff7aec2af1df99bb88eb4ac88c39c8c2f6bd0f1a3c49623ef3f4", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "5b3442b3-cf19-4529-b3aa-21c134556f32": {"doc_hash": "0e37581803d7040fb11cb4e01974f1a5bfa5b02db0eff62e410404fe69906c65", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "e674b60f-95fc-4ded-8605-9c154841af9f": {"doc_hash": "d0b415b15729d7c22eb62771398ef8ac73e86a61d4f717d5aeb2c592d09e8fde", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}, "089da4e3-ff69-47ee-9c2d-12ec452a6060": {"doc_hash": "f57bd6e10c05a9ef5e897ffda450fbacbe58e94d95ffa6ce3c2643065e159638", "ref_doc_id": "d22ba503-f88a-4035-8761-33a79a4352fb"}}, "docstore/ref_doc_info": {"d22ba503-f88a-4035-8761-33a79a4352fb": {"node_ids": ["b508454b-d0af-4c7a-8d52-04583f097560", "5d195fc9-7826-4d10-9483-dff9c782b5d2", "a506c987-618e-471e-a1b4-0bc8ca2013c9", "a3428a2e-93bd-4900-98b8-26a78546185c", "5bddf043-d22a-4dcd-ae0a-8361797bbdd6", "945410f4-7c17-46fc-b6d4-837a50d26875", "49c68fb8-12f6-4e16-b7d7-6b0d06a3a69a", "5b3442b3-cf19-4529-b3aa-21c134556f32", "e674b60f-95fc-4ded-8605-9c154841af9f", "089da4e3-ff69-47ee-9c2d-12ec452a6060"], "metadata": {"Header_1": " Introduction", "filename": "llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00.md", "extension": ".md", "title": "LlamaIndex: Enhancing Retrieval Performance with Alpha Tuning in Hybrid Search in RAG", "date": "Jan 31, 2024", "url": "https://www.llamaindex.ai/blog/llamaindex-enhancing-retrieval-performance-with-alpha-tuning-in-hybrid-search-in-rag-135d0c9b8a00"}}}}