{"docstore/data": {"d37f59c6-dbe7-4775-80bf-f33fcefa169b": {"__data__": {"id_": "d37f59c6-dbe7-4775-80bf-f33fcefa169b", "embedding": null, "metadata": {"filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6292cf8-cb59-43d6-bdfb-33dce0e2d83c", "node_type": "4", "metadata": {"filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "hash": "1412866b83a2e3097569dc2bb3e861a08914ea118bd77a8e0685d98ba1241bc8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e889edaf-811b-4257-a239-bf56f26e93f5", "node_type": "1", "metadata": {"Header_2": " Set up Azure Container Apps dynamic sessions"}, "hash": "105b1ae9bc03c16b590dc2ad4f29673551fa48e61d311d67e006279ace7852e0", "class_name": "RelatedNodeInfo"}}, "text": "One of the many amazing feats that LLMs are capable of is generating\nexecutable code. This can be used to solve a variety of complex problems that\nrequire calculations and fixed logic that traditional computing excels at but\nLLMs can struggle to perform directly. When building agents to perform complex\ntasks, equipping your agent with code execution as an available tool can be a\npowerful strategy.\n\nHowever, this strategy comes with a major drawback: executable code can be\nflawed or even dangerous to execute, and detecting whether code will be\nproblematic prior to executing it is arguably an expression of the [ Halting\nProblem ](https://en.wikipedia.org/wiki/Halting_problem) , making it\nimpossible to guarantee success at detection.\n\nThe solution is [ sandboxing\n](https://en.wikipedia.org/wiki/Sandbox_\\(computer_security\\)) , to isolate\npotentially problematic code from the host environment. Now, thanks to dynamic\nsessions in Azure Container Apps, the ability to execute sandboxed code\ngenerated by an LLM is simple directly from LlamaIndex. It\u2019s implemented as a\ntool that can be used by any LlamaIndex agent.\n\nIn this blog post we\u2019ll show you exactly how to use the new Azure Code\nInterpreter tool and walk you through a couple of examples of how to make the\nmost of it. You can see the full code in [ this notebook\n](https://docs.llamaindex.ai/en/latest/examples/tools/azure_code_interpreter/)\nand read more in the [ tool documentation ](https://llamahub.ai/l/tools/llama-\nindex-tools-azure-code-interpreter) on LlamaHub and on [ learn.microsoft.com\n](https://learn.microsoft.com/en-us/azure/container-apps/sessions-code-\ninterpreter?tabs=azure-cli) .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1666, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e889edaf-811b-4257-a239-bf56f26e93f5": {"__data__": {"id_": "e889edaf-811b-4257-a239-bf56f26e93f5", "embedding": null, "metadata": {"Header_2": " Set up Azure Container Apps dynamic sessions", "filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6292cf8-cb59-43d6-bdfb-33dce0e2d83c", "node_type": "4", "metadata": {"filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "hash": "1412866b83a2e3097569dc2bb3e861a08914ea118bd77a8e0685d98ba1241bc8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d37f59c6-dbe7-4775-80bf-f33fcefa169b", "node_type": "1", "metadata": {"filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "hash": "c9cd3133adbda60145a5c0c88cfcd447ff5f4996a5d9de3552e28641f2a8b668", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bfae100e-2ab2-4905-bb34-ac8a09823e5d", "node_type": "1", "metadata": {"Header_2": " Dynamic sessions code interpreter in action"}, "hash": "713d79b9b59909dd911b2e10ceefb20db3dae869c45009af1fb597eed798194b", "class_name": "RelatedNodeInfo"}}, "text": "Set up Azure Container Apps dynamic sessions\n\nFirst, install our python packages including the tool:\n\n    \n    \n    pip install llama-index\n    pip install llama-index-llms-azure\n    pip install llama-index-tools-azure-code-interpreter\n\nIn [ the notebook\n](https://docs.llamaindex.ai/en/latest/examples/tools/azure_code_interpreter/)\nwe\u2019re using GPT 3.5 Turbo hosted on Azure as the LLM, but you can use any LLM\ncapable of tool use:\n\n    \n    \n    from llama_index.llms.azure_openai import AzureOpenAI\n    llm = AzureOpenAI(\n        model=\"gpt-35-turbo\",\n        deployment_name=\"gpt-35-deploy\",\n        api_key=api_key,\n        azure_endpoint=azure_endpoint,\n        api_version=api_version,\n    )\n\nOnce you\u2019ve got your LLM set up, you\u2019ll need to [ create a session pool\n](https://learn.microsoft.com/en-us/azure/container-apps/sessions-code-\ninterpreter?tabs=azure-cli#code-interpreter-session-pool) to host your\nexecutions. Doing this will give you a pool management endpoint URL that you\ncan provide to LlamaIndex like this:\n\n    \n    \n    # Import the AzureCodeInterpreterToolSpec from llama_index\n    from llama_index.tools.azure_code_interpreter import (\n        AzureCodeInterpreterToolSpec,\n    )\n    \n    # Create the AzureCodeInterpreterToolSpec with the pool_managment_endpoint set to your session management endpoint\n    # It is optional to set the local_save_path, but it is recommended to set it to a path where the tool can automatically save any intermediate data generated from Python code's output.\n    azure_code_interpreter_spec = AzureCodeInterpreterToolSpec(\n        pool_managment_endpoint=\"your-pool-management-endpoint\",\n        local_save_path=\"local-file-path-to-save-intermediate-data\",\n    )\n\nThis sets up a tool ready to be used with LlamaIndex. You\u2019re now ready to set\nup your agent:\n\n    \n    \n    # Import the ReActAgent\n    from llama_index.core.agent import ReActAgent\n    \n    # Create the ReActAgent and inject the tools defined in the AzureDynamicSessionsToolSpec\n    agent = ReActAgent.from_tools(\n        azure_code_interpreter_spec.to_tool_list(), llm=llm, verbose=True\n    )\n\nIn this example we\u2019re providing only a single tool, but you could provide any\nother tools you like to your ReAct agent. Now you\u2019ve got an agent, you\u2019re\nready to ask it to perform tasks!", "mimetype": "text/plain", "start_char_idx": 1672, "end_char_idx": 3976, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bfae100e-2ab2-4905-bb34-ac8a09823e5d": {"__data__": {"id_": "bfae100e-2ab2-4905-bb34-ac8a09823e5d", "embedding": null, "metadata": {"Header_2": " Dynamic sessions code interpreter in action", "filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6292cf8-cb59-43d6-bdfb-33dce0e2d83c", "node_type": "4", "metadata": {"filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "hash": "1412866b83a2e3097569dc2bb3e861a08914ea118bd77a8e0685d98ba1241bc8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e889edaf-811b-4257-a239-bf56f26e93f5", "node_type": "1", "metadata": {"Header_2": " Set up Azure Container Apps dynamic sessions", "filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "hash": "883524713690bf951131687215d8bcc2d23b7d575413c115583f692b6428dcc4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86308e4f-c7c4-4dae-9bb4-5e5ebff70397", "node_type": "1", "metadata": {"Header_2": " Endless possibilities"}, "hash": "1474227aef0571985327c526c83f30d12761cdb2b12256488c469f37a9012478", "class_name": "RelatedNodeInfo"}}, "text": "Dynamic sessions code interpreter in action\n\nIn our first example, we\u2019re going to ask the agent the time in Seattle. This\nis usually a tricky task for LLMs, which don\u2019t know what time it is anywhere!\n\n    \n    \n    # Test the agent with simple answers that could leverage Python codes\n    print(agent.chat(\"Tell me the current time in Seattle.\"))\n\nThe agent generates python code to determine the time and convert it to the\ncorrect time zone. It passes this code to Azure Container Apps dynamic\nsessions, which execute the code and return the answer:\n\n    \n    \n    Thought: To provide the current time in Seattle, I need to calculate it based on the current UTC time and adjust for Seattle's time zone, which is Pacific Daylight Time (PDT) during daylight saving time and Pacific Standard Time (PST) outside of daylight saving time. PDT is UTC-7, and PST is UTC-8. I can use the code interpreter tool to get the current UTC time and adjust it accordingly.\n    Action: code_interpreter\n    Action Input: {'python_code': \"from datetime import datetime, timedelta; import pytz; utc_now = datetime.now(pytz.utc); seattle_time = utc_now.astimezone(pytz.timezone('America/Los_Angeles')); seattle_time.strftime('%Y-%m-%d %H:%M:%S %Z%z')\"}\n    Observation: {'$id': '1', 'status': 'Success', 'stdout': '', 'stderr': '', 'result': '2024-05-04 13:54:09 PDT-0700', 'executionTimeInMilliseconds': 120}\n    Thought: I can answer without using any more tools. I'll use the user's language to answer.\n    Answer: The current time in Seattle is 2024-05-04 13:54:09 PDT.\n    The current time in Seattle is 2024-05-04 13:54:09 PDT.\n    \n\nYou can also use the tool to safely inspect and manipulate data, as in this\nexample where we ask it to open a CSV file and answer questions about it:\n\n    \n    \n    # Upload a sample temperature file of a day in Redmond Washington and ask a question about it\n    res = azure_code_interpreter_spec.upload_file(\n        local_file_path=\"./TemperatureData.csv\"\n    )\n    if len(res) != 0:\n        print(\n            agent.chat(\"Find the highest temperature in the file that I uploaded.\")\n        )\n\nIt doesn\u2019t just read data from the CSV, it performs math on it to determine\nthe highest temperature:\n\n    \n    \n    Thought: I need to use the list_files tool to get the metadata for the uploaded file, and then use python to read the file and find the highest temperature.\n    Action: list_files\n    Action Input: {}\n    Observation: [RemoteFileMetadata(filename='TemperatureData.csv', size_in_bytes=514, file_full_path='/mnt/data/TemperatureData.csv')]\n    Thought: I have the metadata for the file. I need to use python to read the file and find the highest temperature.\n    Action: code_interpreter\n    Action Input: {'python_code': \"import csv\\n\\nwith open('/mnt/data/TemperatureData.csv', 'r') as f:\\n    reader = csv.reader(f)\\n    next(reader)\\n    highest_temp = float('-inf')\\n    for row in reader:\\n        temp = float(row[1])\\n        if temp > highest_temp:\\n            highest_temp = temp\\nprint(highest_temp)\"}\n    Observation: {'$id': '1', 'status': 'Success', 'stdout': '12.4\\n', 'stderr': '', 'result': '', 'executionTimeInMilliseconds': 26}\n    Thought: I have the highest temperature. I can answer the question.\n    Answer: The highest temperature in the file is 12.4 degrees.\n    The highest temperature in the file is 12.4 degrees.\n\nThe tool can also safely modify your uploaded files, as in this example where\nwe get it to sort the data in the CSV:\n\n    \n    \n    # Ask the LLM to perform modifications on the sample temperature file\n    print(\n        agent.chat(\n            \"Rearrange the temperature data in a descending order and save it back to the original csv file.\"\n        )\n    )\n\nIn this example, you\u2019ll see that the LLM initially produces code with a syntax\nerror, but the agent is smart enough to figure out what went wrong and correct\nitself:\n\n    \n    \n    Thought: To proceed, I need to first list the files in the session pool to identify the uploaded temperature data file.\n    Action: list_files\n    Action Input: {}\n    Observation: [RemoteFileMetadata(filename='TemperatureCurve.png', size_in_bytes=35512, file_full_path='/mnt/data/TemperatureCurve.png'), RemoteFileMetadata(filename='TemperatureData.csv', size_in_bytes=514, file_full_path='/mnt/data/TemperatureData.csv')]\n    Thought: The temperature data file is identified as 'TemperatureData.csv'. I need to read its contents, rearrange the temperature data in descending order, and then save the changes back to the original CSV file.\n    Action: code_interpreter\n    Action Input: {'python_code': \"import pandas as pd\\n\\ndf = pd.read_csv('/mnt/data/TemperatureData.csv')\\ndf_sorted = df.sort_values(by='Temperature', ascending=False)\\ndf_sorted.to_csv('/mnt/data/TemperatureData.csv', index=False)\\n'filename': 'TemperatureData.csv'\"}\n    Observation: {'$id': '1', 'status': 'Failure', 'stdout': '', 'stderr': \"illegal target for annotation (3407605186.py, line 6)  Cell In[2363], line 6\\n    'filename': 'TemperatureData.csv'\\n    ^\\nSyntaxError: illegal target for annotation\\n\\n\", 'result': None, 'executionTimeInMilliseconds': 9}\n    Thought: There was a syntax error in the Python code due to an incorrect line. I need to correct the code and execute it again to sort the temperature data and save it back to the CSV file.\n    Action: code_interpreter\n    Action Input: {'python_code': \"import pandas as pd\\n\\ndf = pd.read_csv('/mnt/data/TemperatureData.csv')\\ndf_sorted = df.sort_values(by='Temperature', ascending=False)\\ndf_sorted.to_csv('/mnt/data/TemperatureData.csv', index=False)\"}\n    Observation: {'$id': '1', 'status': 'Success', 'stdout': '', 'stderr': '', 'result': '', 'executionTimeInMilliseconds': 91}\n    Thought: I can answer without using any more tools. I'll use the user's language to answer.\n    Answer: The temperature data has been successfully rearranged in descending order and saved back to the original CSV file, 'TemperatureData.csv'.\n    The temperature data has been successfully rearranged in descending order and saved back to the original CSV file, 'TemperatureData.csv'.\n\nModifying files would not be useful if you couldn\u2019t retrieve them after\nmodification, which is done like this:\n\n    \n    \n    # Download the modified file\n    azure_code_interpreter_spec.download_file_to_local(\n        remote_file_path=\"TemperatureData.csv\",\n        local_file_path=\"/.../SortedTemperatureData.csv\",\n    )", "mimetype": "text/plain", "start_char_idx": 3982, "end_char_idx": 10436, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86308e4f-c7c4-4dae-9bb4-5e5ebff70397": {"__data__": {"id_": "86308e4f-c7c4-4dae-9bb4-5e5ebff70397", "embedding": null, "metadata": {"Header_2": " Endless possibilities", "filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b6292cf8-cb59-43d6-bdfb-33dce0e2d83c", "node_type": "4", "metadata": {"filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "hash": "1412866b83a2e3097569dc2bb3e861a08914ea118bd77a8e0685d98ba1241bc8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bfae100e-2ab2-4905-bb34-ac8a09823e5d", "node_type": "1", "metadata": {"Header_2": " Dynamic sessions code interpreter in action", "filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}, "hash": "b25da2fe0bf0c702444660e8cbb333e8aa2f6ed8296c9b90af5822f0352f3f27", "class_name": "RelatedNodeInfo"}}, "text": "Endless possibilities\n\nThe scope of tasks that you can achieve with sandboxed code execution is as\nbroad as programming itself, and having safe execution guaranteed allows you\nto confidently hand agents tasks that previously you might have been hesitant\nabout. We think this is an amazing addition to our LLM agent capabilities and\nwe\u2019re excited to see what you build with it.", "mimetype": "text/plain", "start_char_idx": 10442, "end_char_idx": 10818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"d37f59c6-dbe7-4775-80bf-f33fcefa169b": {"doc_hash": "c9cd3133adbda60145a5c0c88cfcd447ff5f4996a5d9de3552e28641f2a8b668", "ref_doc_id": "b6292cf8-cb59-43d6-bdfb-33dce0e2d83c"}, "e889edaf-811b-4257-a239-bf56f26e93f5": {"doc_hash": "883524713690bf951131687215d8bcc2d23b7d575413c115583f692b6428dcc4", "ref_doc_id": "b6292cf8-cb59-43d6-bdfb-33dce0e2d83c"}, "bfae100e-2ab2-4905-bb34-ac8a09823e5d": {"doc_hash": "b25da2fe0bf0c702444660e8cbb333e8aa2f6ed8296c9b90af5822f0352f3f27", "ref_doc_id": "b6292cf8-cb59-43d6-bdfb-33dce0e2d83c"}, "86308e4f-c7c4-4dae-9bb4-5e5ebff70397": {"doc_hash": "19324152d21896b7fd7219d7d4fea975c10ba8a0f32fd30597bedb45142dffa1", "ref_doc_id": "b6292cf8-cb59-43d6-bdfb-33dce0e2d83c"}}, "docstore/ref_doc_info": {"b6292cf8-cb59-43d6-bdfb-33dce0e2d83c": {"node_ids": ["d37f59c6-dbe7-4775-80bf-f33fcefa169b", "e889edaf-811b-4257-a239-bf56f26e93f5", "bfae100e-2ab2-4905-bb34-ac8a09823e5d", "86308e4f-c7c4-4dae-9bb4-5e5ebff70397"], "metadata": {"filename": "secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions.md", "extension": ".md", "title": "Secure code execution in LlamaIndex with Azure Container Apps dynamic sessions", "date": "May 21, 2024", "url": "https://www.llamaindex.ai/blog/secure-code-execution-in-llamaindex-with-azure-container-apps-dynamic-sessions"}}}}